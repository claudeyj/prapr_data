<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_1</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters(org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local initial is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest.testBadParameters(org.apache.commons.math.analysis.UnivariateRealSolverUtilsTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local lowerBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local upperBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>4</index><block>0</block><killingTests/><suspValue>0.23570226039551587</suspValue><description>local initial is replaced by local upperBound to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local lowerBound is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local upperBound is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>Substituted 2147483647 with -2147483648</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed call to org/apache/commons/math/analysis/UnivariateRealSolverUtils::bracket</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>replaced return value with null for org/apache/commons/math/analysis/UnivariateRealSolverUtils::bracket</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>mutated return of Object value for org/apache/commons/math/analysis/UnivariateRealSolverUtils::bracket to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_0</mutator><index>63</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.toString()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>MethodNameMutator_4</mutator><index>63</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to factory method java.lang.StringBuilder.toString()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>70ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>72ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>136ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>32</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local initial is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>33</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local lowerBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local initial is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local upperBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local lowerBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local upperBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local lowerBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local initial is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>61</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local upperBound is replaced by local initial to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>32</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local initial is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>33</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local lowerBound is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local initial is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local upperBound is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local lowerBound is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>local upperBound is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local lowerBound is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local initial is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>61</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>local upperBound is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>63</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to java.lang.StringBuilder::toString()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>63</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>the call to toString()Ljava/lang/String; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>35</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>39</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>50</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/IllegalArgumentException::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>63</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>removed call to java/lang/StringBuilder::toString</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>35</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>39</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>43</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>35</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>39</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>43</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.23570226039551587</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>52</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>58</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>60</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnivariateRealSolverUtils.java</sourceFile><mutatedClass>org.apache.commons.math.analysis.UnivariateRealSolverUtils</mutatedClass><mutatedMethod>bracket</mutatedMethod><methodDescription>(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local maxIterations is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>39</index><block>2</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local epsilon is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>49</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>56</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>104ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>158</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>159</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>164</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local r is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>170</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>173</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>174</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>180</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>184</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>188</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>191</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>192</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>198</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local n is replaced by local maxIterations to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>199</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local maxIterations is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local epsilon is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>3</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>158</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>159</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>164</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local r is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>170</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local epsilon to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>173</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>174</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>180</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>184</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>188</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>191</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local epsilon to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>192</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local epsilon to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local epsilon is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>101ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>99ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>158</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>159</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>164</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local r is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local p0 to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>170</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local p0 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>173</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>174</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local p0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>180</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local p1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>184</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local p0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>188</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local p0 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>191</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>192</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p0 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local p0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local epsilon is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>158</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>159</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>164</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local r is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local p1 to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>170</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local p1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>173</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>174</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local p1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>180</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>184</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>188</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local p1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>191</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>192</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local p1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local p1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local epsilon is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>98ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>102ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>73</index><block>3</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local q0 to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>158</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>159</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>164</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local r is replaced by local q0 to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local q0 to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>170</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local q0 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>173</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>174</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>176</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>180</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local q1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>184</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local q1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>188</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local q1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>191</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>192</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local q0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local q0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local epsilon is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local x is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local a is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>73</index><block>3</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local c to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local b is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>158</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>159</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>164</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local r is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local q1 to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>170</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local relativeError is replaced by local q1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>173</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>174</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>176</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local q1 to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>180</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local p0 is replaced by local c to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>184</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local p1 is replaced by local c to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>262081ms</time></test></testsExecutionTime><patchExecutionTime>262100ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local c to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>188</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q0 is replaced by local c to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>191</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local q2 is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>192</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>local q1 is replaced by local c to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>local c is replaced by local q1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local p1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local q1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>39</index><block>2</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local relativeError is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local epsilon is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>63</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local p1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local p0 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>100ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>72</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local q1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>142451ms</time></test></testsExecutionTime><patchExecutionTime>142474ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>75</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local q0 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>85</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>158</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>159</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>164</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local r is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>165</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local c is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>173</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>174</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>166</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>179</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local p1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>99ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>183</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local p2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>187</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local q1 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>191</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>access to local q2 is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>218</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>access to local c is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to getA with a call to getB</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to getA with a call to getB</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to getB with a call to getA</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>86</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>169</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to cos</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>169</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to acos</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>169</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to exp</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to abs with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::getA(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::getA(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::getB(ID)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getB(ID)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getB(ID)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getB(ID)D is guarded returning local epsilon</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getA(ID)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>the call to getB(ID)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::getA with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::getA with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::getB with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced call to java/lang/Math::abs with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>200</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>91ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Substituted 1.7976931348623157E308 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>167</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>68</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>3</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>160</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>166</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>168</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>175</index><block>10</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>200</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::getA</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>51</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::getA</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>58</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::getB</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>86</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>169</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed call to java/lang/Math::abs</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>219</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/util/ContinuedFraction::evaluate</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>87</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>87</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>42</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>200</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>42</index><block>2</block><killingTests/><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>200</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>219</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/util/ContinuedFraction::evaluate</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ContinuedFraction.java</sourceFile><mutatedClass>org.apache.commons.math.util.ContinuedFraction</mutatedClass><mutatedMethod>evaluate</mutatedMethod><methodDescription>(DDI)D</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1111111111111111</suspValue><description>Removed increment 1</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>27</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>31</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>204</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local ret is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>3</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>13</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>27</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>31</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>204</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>38</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local ret is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>204</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>38</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>local ret is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>27</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>30</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>31</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>204</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>26</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::logGamma with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>28</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::logGamma with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>33</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>replaced call to org/apache/commons/math/special/Gamma::logGamma with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>removed call to org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>28</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>removed call to org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>33</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1386750490563073</suspValue><description>removed call to org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>39</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Beta::logBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>13</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>12</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>16</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>12</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>16</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>logBeta</mutatedMethod><methodDescription>(DDDI)D</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><block>17</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Beta::logBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_1</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to regularizedBeta(DDDDI)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to org/apache/commons/math/special/Beta::regularizedBeta with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>Substituted 1.0E-14 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>Substituted 2147483647 with -2147483648</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed call to org/apache/commons/math/special/Beta::regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Beta::regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDD)D</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Beta::regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta(DDDI)D with a call to logBeta(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>69ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta(DDDI)D with a call to logBeta(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta(DDDI)D with a call to logBeta(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta(DDDI)D with a call to logBeta(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta(DDDI)D with a call to logBeta(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta(DDDI)D with a call to logBeta(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(D)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to evaluate(DDI)D with a call to evaluate(DD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>12</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>41</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>67</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>68</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>74</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>77</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>84</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>87</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>88</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>89</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local epsilon is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>97</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local epsilon is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>105</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>12</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>37</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>41</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>67</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>68</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>74</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>77</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>84</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>87</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>88</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>89</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local epsilon is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>97</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local epsilon is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>105</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local ret is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>12</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>37</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>41</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>67</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>68</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>74</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>77</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>79</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>84</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>87</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local a is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>88</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local b is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>89</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local epsilon is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>97</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local epsilon is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>105</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local ret is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>105</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>local ret is replaced by local epsilon to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>12</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>67</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>68</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>74</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>77</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>84</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>87</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local a is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>88</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local b is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>89</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local epsilon is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>97</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local epsilon is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>105</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to logBeta with a call to regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to exp with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the call to org.apache.commons.math.util.ContinuedFraction::evaluate(DDI)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the call to evaluate(DDI)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the call to evaluate(DDI)D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the call to evaluate(DDI)D is guarded returning local a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the call to evaluate(DDI)D is guarded returning field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to org/apache/commons/math/special/Beta::logBeta with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to java/lang/Math::exp with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced call to org/apache/commons/math/util/ContinuedFraction::evaluate with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>19</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>69</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to org/apache/commons/math/special/Beta$1::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>17</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>43</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>78</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>94</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>65ms</time></test></testsExecutionTime><patchExecutionTime>70ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>76</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>86</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>95</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>75</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>85</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>91</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to org/apache/commons/math/special/Beta::logBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to java/lang/Math::exp</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>100</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed call to org/apache/commons/math/util/ContinuedFraction::evaluate</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>106</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Beta::regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>19</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>47</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>19</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>27</index><block>7</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>47</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta</mutatedClass><mutatedMethod>regularizedBeta</mutatedMethod><methodDescription>(DDDDI)D</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>106</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.13018891098082389</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Beta::regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>local numeratorDegreesOfFreedom is replaced by local denominatorDegreesOfFreedom to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>local denominatorDegreesOfFreedom is replaced by local numeratorDegreesOfFreedom to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>replaced call to setNumeratorDegreesOfFreedom with a call to setDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>replaced call to setDenominatorDegreesOfFreedom with a call to setNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setNumeratorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setDenominatorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setNumeratorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setDenominatorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setNumeratorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setDenominatorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setNumeratorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setDenominatorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setNumeratorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to setDenominatorDegreesOfFreedom(D)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to org.apache.commons.math.distribution.FDistributionImpl::setNumeratorDegreesOfFreedom(D)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the call to org.apache.commons.math.distribution.FDistributionImpl::setDenominatorDegreesOfFreedom(D)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>removed call to org/apache/commons/math/distribution/FDistributionImpl::setNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>removed call to org/apache/commons/math/distribution/FDistributionImpl::setDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDI)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to regularizedBeta(DDD)D with a call to regularizedBeta(DDDD)D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>26</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local x is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local m is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local x is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local n is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local m is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>44</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>25</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local n is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>26</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local x is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local m is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local n is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local x is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local n is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>local m is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local x is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local n is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>26</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local x is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local m is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local n is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local x is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local n is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local m is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>44</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local ret is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local x is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>25</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local n is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>26</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local x is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local m is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local n is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local x is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local n is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>access to local m is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>44</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>access to local ret is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to getNumeratorDegreesOfFreedom with a call to getDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to getDenominatorDegreesOfFreedom with a call to getNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to org.apache.commons.math.distribution.FDistributionImpl::getNumeratorDegreesOfFreedom()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to org.apache.commons.math.distribution.FDistributionImpl::getDenominatorDegreesOfFreedom()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getNumeratorDegreesOfFreedom()D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>61ms</time></test></testsExecutionTime><patchExecutionTime>68ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getNumeratorDegreesOfFreedom()D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning local n</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>93ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getNumeratorDegreesOfFreedom()D is guarded returning field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getNumeratorDegreesOfFreedom()D is guarded returning field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>replaced call to org/apache/commons/math/special/Beta::regularizedBeta with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>37</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>removed call to org/apache/commons/math/distribution/FDistributionImpl::getNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>removed call to org/apache/commons/math/distribution/FDistributionImpl::getDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>84ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>removed call to org/apache/commons/math/special/Beta::regularizedBeta</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/distribution/FDistributionImpl::cumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>cumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::cumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to denominatorDegreesOfFreedom is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to denominatorDegreesOfFreedom is guarded using field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::getNumeratorDegreesOfFreedom()D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::getDenominatorDegreesOfFreedom()D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced access to denominatorDegreesOfFreedom with an access to numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to denominatorDegreesOfFreedom is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to denominatorDegreesOfFreedom is guarded returning field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/distribution/FDistributionImpl::getDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::getDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDomainLowerBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDomainLowerBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::getDomainLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDomainUpperBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Substituted 1.7976931348623157E308 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDomainUpperBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/distribution/FDistributionImpl::getDomainUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getDomainUpperBound</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::getDomainUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>local d is replaced by local p to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>local d is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>16</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>local d is replaced by local ret to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>195ms</time></test></testsExecutionTime><patchExecutionTime>209ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>access to local d is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>access to local d is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>218ms</time></test></testsExecutionTime><patchExecutionTime>231ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>147</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>access to local d is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>access to local d is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>139ms</time></test></testsExecutionTime><patchExecutionTime>151ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getDenominatorDegreesOfFreedom with a call to getNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.math.distribution.FDistributionImpl::getDenominatorDegreesOfFreedom()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning local p</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getDenominatorDegreesOfFreedom()D is guarded returning field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/math/distribution/FDistributionImpl::getDenominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>17</index><block>11</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/distribution/FDistributionImpl::getInitialDomain</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getInitialDomain</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::getInitialDomain</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to numeratorDegreesOfFreedom is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to numeratorDegreesOfFreedom is guarded using field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::getNumeratorDegreesOfFreedom()D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::getDenominatorDegreesOfFreedom()D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced access to numeratorDegreesOfFreedom with an access to denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to numeratorDegreesOfFreedom is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>the access to numeratorDegreesOfFreedom is guarded returning field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/distribution/FDistributionImpl::getNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>getNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>15</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.3333333333333333</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::getNumeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local p is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local p is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>access to local p is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local p is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>access to local p is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>access to local p is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>the call to org.apache.commons.math.distribution.AbstractContinuousDistribution::inverseCumulativeProbability(D)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>the call to inverseCumulativeProbability(D)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>the call to inverseCumulativeProbability(D)D is guarded returning local p</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>the call to inverseCumulativeProbability(D)D is guarded returning field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>the call to inverseCumulativeProbability(D)D is guarded returning field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>replaced call to org/apache/commons/math/distribution/AbstractContinuousDistribution::inverseCumulativeProbability with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>removed call to org/apache/commons/math/distribution/AbstractContinuousDistribution::inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>26</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/distribution/FDistributionImpl::inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.4472135954999579</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><block>8</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.5</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/distribution/FDistributionImpl::inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>18</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::setNumeratorDegreesOfFreedom(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>18</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.denominatorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::setDenominatorDegreesOfFreedom(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>replaced access to denominatorDegreesOfFreedom with an access to numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>18</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to field denominatorDegreesOfFreedom is replaced by access to local degreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>16</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setDenominatorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>18</index><block>18</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>Removed assignment to member variable denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>18</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::setNumeratorDegreesOfFreedom(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>18</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>the access to field org.apache.commons.math.distribution.FDistributionImpl.numeratorDegreesOfFreedom is replaced by the call to org.apache.commons.math.distribution.FDistributionImpl::setDenominatorDegreesOfFreedom(D)V</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>replaced access to numeratorDegreesOfFreedom with an access to denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>18</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to field numeratorDegreesOfFreedom is replaced by access to local degreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>access to local degreesOfFreedom is replaced by access to field denominatorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FDistributionImpl.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.FDistributionImpl</mutatedClass><mutatedMethod>setNumeratorDegreesOfFreedom</mutatedMethod><methodDescription>(D)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>18</index><block>14</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2886751345948129</suspValue><description>Removed assignment to member variable numeratorDegreesOfFreedom</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDD)[D with a call to bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>catch type org/apache/commons/math/ConvergenceException is replaced with org/apache/commons/math/MathException</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local p is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local p is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local lowerBound is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local upperBound is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local p is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>48</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local lowerBound is replaced by local upperBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>local upperBound is replaced by local lowerBound to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getDomainLowerBound with a call to inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getDomainUpperBound with a call to inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getInitialDomain with a call to inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getDomainLowerBound with a call to getInitialDomain</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getDomainUpperBound with a call to getInitialDomain</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>47</index><block>4</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>replaced call to getInitialDomain with a call to getDomainLowerBound</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getDomainLowerBound with a call to getDomainUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to getDomainUpperBound with a call to getDomainLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>47</index><block>4</block><killingTests/><suspValue>0.2581988897471611</suspValue><description>replaced call to getInitialDomain with a call to getDomainUpperBound</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to org.apache.commons.math.distribution.AbstractContinuousDistribution::getDomainLowerBound(D)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to org.apache.commons.math.distribution.AbstractContinuousDistribution::getDomainUpperBound(D)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to org.apache.commons.math.distribution.AbstractContinuousDistribution::getInitialDomain(D)D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getDomainLowerBound(D)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getDomainUpperBound(D)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getInitialDomain(D)D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getDomainLowerBound(D)D is guarded returning local p</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getDomainUpperBound(D)D is guarded returning local p</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getInitialDomain(D)D is guarded returning local p</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getDomainUpperBound(D)D is guarded returning local lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>the call to getInitialDomain(D)D is guarded returning local lowerBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to org/apache/commons/math/distribution/AbstractContinuousDistribution::getDomainLowerBound with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to org/apache/commons/math/distribution/AbstractContinuousDistribution::getDomainUpperBound with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>replaced call to org/apache/commons/math/distribution/AbstractContinuousDistribution::getInitialDomain with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/distribution/AbstractContinuousDistribution$1::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>113ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>68ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>30</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/distribution/AbstractContinuousDistribution::getDomainLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/distribution/AbstractContinuousDistribution::getDomainUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/distribution/AbstractContinuousDistribution::getInitialDomain</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math.distribution.NormalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>50</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>removed call to org/apache/commons/math/analysis/UnivariateRealSolverUtils::bracket</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Removed assignment to member variable val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Removed assignment to member variable val$a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Beta$1::getA</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getA</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Beta$1::getA</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$b is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$b is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$b is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$b is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$b is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$b is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded using field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced access to val$b with an access to val$a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced access to val$a with an access to val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced access to val$a with an access to val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced access to val$a with an access to val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced access to val$a with an access to val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced access to val$b with an access to val$a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced access to val$a with an access to val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced access to val$a with an access to val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to field val$b is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$b is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to field val$b is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to field val$a is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to field val$a is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$b is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to field val$a is replaced by access to local m</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>local x is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>2</block><killingTests/><suspValue>0.15075567228888181</suspValue><description>local m is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local x is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='RUN_ERROR' numberOfTestsRun='0'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>3</block><killingTests/><suspValue>0.14002800840280097</suspValue><description>local m is replaced by local x to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>149</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>88</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local m is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>149</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>88</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>local m is replaced by local ret to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to local x is replaced by access to field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local x is replaced by access to field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>149</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>88</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local m is replaced by access to field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>access to local x is replaced by access to field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>66</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local x is replaced by access to field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>149</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>88</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>access to local m is replaced by access to field val$a</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$b is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$b is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$b is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$b is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$b is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>33</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to val$a is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$b is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>70</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>76</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>the access to val$a is guarded returning field val$b</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>49</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>71</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>77</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 2.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>81</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>68</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed negation</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>2</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>48</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>96ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>82</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>84</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>89</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Beta$1::getB</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.14002800840280097</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Beta.java</sourceFile><mutatedClass>org.apache.commons.math.special.Beta$1</mutatedClass><mutatedMethod>getB</mutatedMethod><methodDescription>(ID)D</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>89</index><block>3</block><killingTests/><suspValue>0.14002800840280097</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Beta$1::getB</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced access to HALF_LOG_2_PI with an access to DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to field HALF_LOG_2_PI is replaced by access to local x</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to field HALF_LOG_2_PI is replaced by access to local g</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>77</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to field HALF_LOG_2_PI is replaced by access to local sum</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>58</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local x to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local g is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>87</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>local ret is replaced by local x to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>46</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local g to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>58</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local g to be defined</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local g is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local g to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local sum is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>local x is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local g is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local sum is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>87</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local ret is replaced by access to field DEFAULT_EPSILON</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>53</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>61</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local g is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>79</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local sum is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>80</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>access to local x is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>87</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local ret is replaced by access to field HALF_LOG_2_PI</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>62ms</time></test></testsExecutionTime><patchExecutionTime>72ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to log with a call to log10</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>replaced call to java/lang/Math::log with argument</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>49</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Changed increment from -1 to 1</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Substituted 4.7421875 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>64</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>70</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Substituted 0.5 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><block>4</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>76</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>73</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>82</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>removed call to java/lang/Math::log</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>88</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.1</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>88</index><block>5</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/special/Gamma::logGamma</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Gamma.java</sourceFile><mutatedClass>org.apache.commons.math.special.Gamma</mutatedClass><mutatedMethod>logGamma</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>49</index><block>4</block><killingTests/><suspValue>0.1</suspValue><description>Removed increment -1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/distribution/AbstractContinuousDistribution;D)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable this$0</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractContinuousDistribution.java</sourceFile><mutatedClass>org.apache.commons.math.distribution.AbstractContinuousDistribution$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math/distribution/AbstractContinuousDistribution;D)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</killingTests><suspValue>0.2581988897471611</suspValue><description>Removed assignment to member variable val$p</description><testsExecutionTime><test><name>org.apache.commons.math.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math.distribution.FDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
</mutations>
