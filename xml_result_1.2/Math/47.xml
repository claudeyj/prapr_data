<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field real is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field imaginary is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field real is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>access to field imaginary is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>6</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>49ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>33ms</time></test></testsExecutionTime><patchExecutionTime>146ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.10425720702853739</suspValue><description>Removed assignment to member variable isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>50ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>31</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>31</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>31</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>31</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced access to NaN with an access to ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>31</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field NaN is replaced by access to local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>31</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>access to field NaN is replaced by access to local divisor</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>local this is replaced by local divisor to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>local divisor is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>45ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>access to local divisor is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>10</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>69ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the access to the local divisor is replaced a call divisor.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>105ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced call to getReal with a call to abs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced call to getImaginary with a call to abs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced call to getReal with a call to getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced call to getImaginary with a call to getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced call to getReal with a call to getArgument</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>replaced call to getImaginary with a call to getArgument</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to org.apache.commons.math.complex.Complex::getReal()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to org.apache.commons.math.complex.Complex::getImaginary()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>11</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>the access to isNaN is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getReal()D is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getImaginary()D is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getReal()D is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getImaginary()D is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getReal()D is guarded returning local divisor</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getImaginary()D is guarded returning local divisor</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getReal()D is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getImaginary()D is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getReal()D is guarded returning field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>the call to getImaginary()D is guarded returning field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>27ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>152ms</time></test></testsExecutionTime><patchExecutionTime>207ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed call to org/apache/commons/math/complex/Complex::getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>25</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed call to org/apache/commons/math/complex/Complex::getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>32</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced return value with null for org/apache/commons/math/complex/Complex::divide</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>16ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.3651483716701107</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><block>13</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.7071067811865475</suspValue><description>mutated return of Object value for org/apache/commons/math/complex/Complex::divide to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>divide</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.34299717028501764</suspValue><description>removed call to org/apache/commons/math/util/MathUtils::checkNotNull</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>40ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to imaginary is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to imaginary is guarded returning field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>20</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/complex/Complex::getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to real is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to real is guarded returning field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>21</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/complex/Complex::getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_0</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_0</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_0</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_0</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_0</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_0</mutator><index>18</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.toString()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_4</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_4</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_4</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_4</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(D)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_4</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; is replaced by an instantiation of type java.lang.StringBuilder using (Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>MethodNameMutator_4</mutator><index>18</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to factory method java.lang.StringBuilder.toString()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(I)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>74ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(C)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/lang/CharSequence;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(D)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; with a call to append(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>25ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>8</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>8</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>21ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(D)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>24ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>69ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to java.lang.StringBuilder::toString()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to real is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the access to imaginary is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(D)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to append(Ljava/lang/String;)Ljava/lang/StringBuilder; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>the call to toString()Ljava/lang/String; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>19</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/math/complex/Complex::toString</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::append</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/StringBuilder::toString</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>28ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>mutated return of Object value for org/apache/commons/math/complex/Complex::toString to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>7</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>10</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>15</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>17</index><block>22</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>1.0</suspValue><description>replaced call to java/lang/StringBuilder::append with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanI(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.05817297271631501</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>120ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.05817297271631501</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.05817297271631501</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testDivideZero(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
</mutations>
