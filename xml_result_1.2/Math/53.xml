<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>access to field real is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>access to field imaginary is replaced by access to local real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>access to field real is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>access to field imaginary is replaced by access to local imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAbsNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAbsInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>local real is replaced by local imaginary to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>67ms</time></test></testsExecutionTime><patchExecutionTime>75ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>local imaginary is replaced by local real to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>the access to isNaN is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>6</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>48ms</time></test></testsExecutionTime><patchExecutionTime>109ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>42</index><block>5</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Removed assignment to member variable real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Removed assignment to member variable imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Removed assignment to member variable isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(DD)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.07808688094430304</suspValue><description>Removed assignment to member variable isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>MethodNameMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to factory method org.apache.commons.math.complex.Complex.createComplex(DD)Lorg/apache/commons/math/complex/Complex; is replaced by an instantiation of type org.apache.commons.math.complex.Complex using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>MethodNameMutator_1</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to factory method org.apache.commons.math.complex.Complex.createComplex(DD)Lorg/apache/commons/math/complex/Complex; is replaced by an instantiation of type org.apache.commons.math.complex.ComplexTest$TestComplex using (Lorg/apache/commons/math/complex/Complex;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>MethodNameMutator_5</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to factory method org.apache.commons.math.complex.Complex.createComplex(DD)Lorg/apache/commons/math/complex/Complex; is replaced by an instantiation of type org.apache.commons.math.complex.ComplexTest$TestComplex using (DD)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to checkNotNull(Ljava/lang/Object;)V with a call to checkNotNull(Ljava/lang/Object;Lorg/apache/commons/math/exception/util/Localizable;[Ljava/lang/Object;)V</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>local rhs is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>local this is replaced by local rhs to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>local this is replaced by local rhs to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>local rhs is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>local this is replaced by local rhs to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>local rhs is replaced by local this to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>access to local rhs is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to the local rhs is replaced a call rhs.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAsin(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to the local rhs is replaced a call rhs.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAsin(org.apache.commons.math.complex.ComplexTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>24ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>21ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAcosInf(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanInf(org.apache.commons.math.complex.ComplexTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAsinInf(org.apache.commons.math.complex.ComplexTest)</name><time>20ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAtanNaN(org.apache.commons.math.complex.ComplexTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>221ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>13</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to the local rhs is replaced a call rhs.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to getReal with a call to abs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>26ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>112ms</time></test></testsExecutionTime><patchExecutionTime>175ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to getImaginary with a call to abs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to getReal with a call to getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>23ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>85ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to getImaginary with a call to getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to getReal with a call to getArgument</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>24ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to getImaginary with a call to getArgument</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to org.apache.commons.math.complex.Complex::getReal()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to org.apache.commons.math.complex.Complex::getImaginary()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to org.apache.commons.math.complex.Complex::createComplex(DD)Lorg/apache/commons/math/complex/Complex; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to real is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to imaginary is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to real is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to imaginary is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to real is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the access to imaginary is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getReal()D is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getImaginary()D is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to createComplex(DD)Lorg/apache/commons/math/complex/Complex; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getReal()D is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getImaginary()D is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to createComplex(DD)Lorg/apache/commons/math/complex/Complex; is guarded returning local this</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getReal()D is guarded returning local rhs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getImaginary()D is guarded returning local rhs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to createComplex(DD)Lorg/apache/commons/math/complex/Complex; is guarded returning local rhs</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getReal()D is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getImaginary()D is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to createComplex(DD)Lorg/apache/commons/math/complex/Complex; is guarded returning field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getReal()D is guarded returning field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to getImaginary()D is guarded returning field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>the call to createComplex(DD)Lorg/apache/commons/math/complex/Complex; is guarded returning field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed call to org/apache/commons/math/complex/Complex::getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>16</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed call to org/apache/commons/math/complex/Complex::getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed call to org/apache/commons/math/complex/Complex::createComplex</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced return value with null for org/apache/commons/math/complex/Complex::add</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>mutated return of Object value for org/apache/commons/math/complex/Complex::add to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>removed call to org/apache/commons/math/util/MathUtils::checkNotNull</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lorg/apache/commons/math/complex/Complex;)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.22360679774997896</suspValue><description>replaced call to org/apache/commons/math/complex/Complex::createComplex with receiver</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local realPart is replaced by local imaginaryPart to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local imaginaryPart is replaced by local realPart to be used</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>access to local realPart is replaced by access to field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>access to local imaginaryPart is replaced by access to field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>access to local realPart is replaced by access to field real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>access to local imaginaryPart is replaced by access to field real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>7</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to org/apache/commons/math/complex/Complex::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced return value with null for org/apache/commons/math/complex/Complex::createComplex</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>createComplex</mutatedMethod><methodDescription>(DD)Lorg/apache/commons/math/complex/Complex;</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>12</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>mutated return of Object value for org/apache/commons/math/complex/Complex::createComplex to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to imaginary is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to imaginary is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to field org.apache.commons.math.complex.Complex.imaginary is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>replaced access to imaginary with an access to real</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to imaginary is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>the access to imaginary is guarded returning field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getImaginary</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>9</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09805806756909202</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/complex/Complex::getImaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to real is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to real is guarded using field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::abs()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>71ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getImaginary()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getReal()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to field org.apache.commons.math.complex.Complex.real is replaced by the call to org.apache.commons.math.complex.Complex::getArgument()D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>replaced access to real with an access to imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>10ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAdd(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testMultiply(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testAddInfinite(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testConstructor(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test><test><name>org.apache.commons.math.complex.ComplexTest.testNegate(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to real is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>the access to real is guarded returning field imaginary</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>replaced double return with 0.0d for org/apache/commons/math/complex/Complex::getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>getReal</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.09853292781642932</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math/complex/Complex::getReal</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to isNaN is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to isNaN is guarded using field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isNaN()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to field org.apache.commons.math.complex.Complex.isNaN is replaced by the call to org.apache.commons.math.complex.Complex::isInfinite()Z</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>replaced access to isNaN with an access to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>access to local this is replaced by access to field I</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>access to local this is replaced by access to field NaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>access to local this is replaced by access to field INF</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>access to local this is replaced by access to field ONE</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>access to local this is replaced by access to field ZERO</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to the local this is replaced a call this.conjugate()</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to isNaN is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>the access to isNaN is guarded returning field isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>replaced boolean return with false for org/apache/commons/math/complex/Complex::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>replaced boolean return with true for org/apache/commons/math/complex/Complex::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Complex.java</sourceFile><mutatedClass>org.apache.commons.math.complex.Complex</mutatedClass><mutatedMethod>isNaN</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.20412414523193154</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.045267873021259265</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>116ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.045267873021259265</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>MathUtils.java</sourceFile><mutatedClass>org.apache.commons.math.util.MathUtils</mutatedClass><mutatedMethod>checkNotNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</killingTests><suspValue>0.045267873021259265</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math.complex.ComplexTest.testAddNaN(org.apache.commons.math.complex.ComplexTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
</mutations>
