<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII[I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII[I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIIJ)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to &#60;init&#62;(IIII[I)V with a call to &#60;init&#62;(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local k is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m1 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m2 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m3 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local k is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m1 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m2 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m3 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local k is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m1 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m2 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>local m3 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i3 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm1 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm2 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i1 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i2 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i3 is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.v is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.index is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.iRm1 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.iRm2 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>47</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.i1 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.i2 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.i3 is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm1 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm2 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i1 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i2 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i3 with an access to v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm1 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm2 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i1 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i2 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i3 with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm1 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm2 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i1 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i2 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i3 with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm1 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm2 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i1 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i2 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i3 with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm1 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to iRm2 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i1 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i2 with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to i3 with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field index is replaced by access to local k</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field iRm1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field iRm2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>47</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field i1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field i2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field i3 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field iRm1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field iRm2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field i1 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field i2 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field i3 is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field index is replaced by access to local m1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field index is replaced by access to local m2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local k is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m1 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m2 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m3 is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local k is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>92ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m1 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m2 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m3 is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local k is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m1 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m2 is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m3 is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local k is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m1 is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m2 is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m3 is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local m3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>45</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m1 is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m2 is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m3 is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local w to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>72</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>73</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>74</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>78</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>85</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>86</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>87</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>91</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>98</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>99</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>100</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m1 is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>102</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>109</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>110</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>111</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m2 is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>113</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>120</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>121</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local j is replaced by local r to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>122</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local m3 is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>124</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>local r is replaced by local j to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i3 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i3 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>71</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>84</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to iRm2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>97</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i1 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>108</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i2 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>119</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to i3 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>67</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>129</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>76</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>89</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>103ms</time></test></testsExecutionTime><patchExecutionTime>114ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>90</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>103</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>112</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>114</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>123</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer modulus with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>67</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>67</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='110'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>135</index><block>3</block><killingTests>org.apache.commons.math3.random.Well1024aTest.testNextLong2(org.apache.commons.math3.random.Well1024aTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::setSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testNextDigestFail(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LevyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.LevyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureHex(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongExtremeValues(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testBetaRangeAboveOne(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeDistribution(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LevyDistributionTest.testParameters(org.apache.commons.math3.distribution.LevyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureIntIAE(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureLongIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testFill(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMoments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeAboveTwo(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformExclusiveEndpoints(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongExtremeValues(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureHex(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntIAE(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureLongIAE(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureHex(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLong2(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ValueServerTest.testProperties(org.apache.commons.math3.random.ValueServerTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testAlphaRangeBelowZero(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongExtremeValues(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.StableRandomGeneratorTest.testBetaRangeBelowMinusOne(org.apache.commons.math3.random.StableRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntIAE(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LevyDistributionTest.testSupport(org.apache.commons.math3.distribution.LevyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetShape(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetScale(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureIntIAE(org.apache.commons.math3.random.Well1024aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextSecureLongIAE(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextSecureHex(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>198ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>29</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>47</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIII[I)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>59</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>replaced call to setSeed([I)V with a call to setSeed(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>access to local seed is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>the call to setSeed([I)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>20</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::setSeed([I)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Substituted 4294967295 with 4294967296</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.029399051601892736</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><block>10</block><killingTests/><suspValue>0.029399051601892736</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::setSeed</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='745'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution(org.apache.commons.math3.linear.HessenbergTransformerTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextGaussian(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextF(org.apache.commons.math3.random.ISAACTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPoisson(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBeta(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.fitting.PolynomialFitterTest.testFit(org.apache.commons.math3.fitting.PolynomialFitterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testKernelOverrideConstant(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPermutation(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextWeibull(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testReseed(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPoisson(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextCauchy(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSampling(org.apache.commons.math3.distribution.TDistributionTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBeta(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testWeightSumOverFlow(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGaussian(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testSampling(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPermutation(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextCauchy(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextExponential(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNexBytes(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextT(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testReseed(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextChiSquare(org.apache.commons.math3.random.Well1024aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMoments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHex(org.apache.commons.math3.random.Well44497aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetCovarianceMatrix(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextT(org.apache.commons.math3.random.Well44497bTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.MathUtilsTest.testPermutedArrayHash(org.apache.commons.math3.util.MathUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testReseed(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBeta(org.apache.commons.math3.random.Well44497bTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testPaired(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportUpperBound(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testProbability(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testSampling(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testReseed(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextExponential(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacity(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testCovarianceConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextT(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextT(org.apache.commons.math3.random.ISAACTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testDensities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensity(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveSingle(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextCauchy(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testConsistency(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions3(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testReseed(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPoisson(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHex(org.apache.commons.math3.random.Well512aTest)</name><time>45ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGamma(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextExponential(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextT(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextWeibull(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextT(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testCumulativeProbability(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextExponential(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testValues(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSampling(org.apache.commons.math3.distribution.FDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testProbability(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleT(org.apache.commons.math3.stat.inference.TTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPermutation(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHex(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testScaling(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testSampling(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.FDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPoisson(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testReseed(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testBeta(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextWeibull(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetScale(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testPreconditions(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNexBytes(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPoisson(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextWeibull(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testInitialMixture(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBeta(org.apache.commons.math3.random.Well19937aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testPreconditions(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPermutation(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextChiSquare(org.apache.commons.math3.random.Well44497aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testReseed(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPermutation(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNexBytes(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMoments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testPreconditions(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPermutation(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfectNegative(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testExceptions(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testReseed(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeDistribution(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGamma(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testMoments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSampling(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullFile(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalMean(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportConnected(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextT(org.apache.commons.math3.random.Well19937aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape10(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testConsistency(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testFit(org.apache.commons.math3.optimization.fitting.PolynomialFitterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextCauchy(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextGamma(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGamma(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNexBytes(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIssue942(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextWeibull(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testConsistency(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LevyDistributionTest.testSampling(org.apache.commons.math3.distribution.LevyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextExponential(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextCauchy(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPermutation(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGamma(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testMoments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGamma(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestGoodnesOfFit(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextCauchy(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testSampling(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextWeibull(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextF(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextExponential(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHex(org.apache.commons.math3.random.Well19937aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextChiSquare(org.apache.commons.math3.random.Well44497bTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDensities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextChiSquare(org.apache.commons.math3.random.Well19937cTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextExponential(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensity(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMath785(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultiple(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensity(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextT(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBeta(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testCumulativeProbability(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquare(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextCauchy(org.apache.commons.math3.random.Well19937aTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testStdErrorConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHex(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextExponential(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilitySpecial(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testParameterAccessors(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testExceptions(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testMaxIterationsPositive(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testSmallSamples(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPermutation(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBeta(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneWayAnovaUtils(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBeta(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextF(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testDensities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextChiSquare(org.apache.commons.math3.random.Well512aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPermutation(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextF(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextF(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbability2(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testFit(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testPreconditions(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetShape(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHex(org.apache.commons.math3.random.Well19937cTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportUpperBound(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testMannWhitneyUSimple(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testPreconditionPositiveWeights(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testNexFail(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testAlpha(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testConsistency(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextWeibull(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPoisson(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquare(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNexBytes(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextF(org.apache.commons.math3.random.Well19937cTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testThresholdPositive(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextF(org.apache.commons.math3.random.Well44497bTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testConsistency(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextChiSquare(org.apache.commons.math3.random.Well19937aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>50ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBeta(org.apache.commons.math3.random.ISAACTest)</name><time>42ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testCumulative(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPoisson(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPoisson(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest.testWilcoxonSignedRankSimple(org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testSmallSamples(org.apache.commons.math3.stat.inference.TTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGridTooFat(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextWeibull(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHex(org.apache.commons.math3.random.ISAACTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregate(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testSerialization(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testConsistency(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextChiSquare(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>73ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testConvergenceException(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPermutation(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleT(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testDoubleLoad(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensity(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportLowerBound(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextExponential(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPoisson(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPermutation(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextGamma(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextF(org.apache.commons.math3.random.Well19937aTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testConsistency(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveXY(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNexBytes(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testNegativeObservedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRandom(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPermutation(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextF(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextExponential(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution(org.apache.commons.math3.linear.HessenbergTransformerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextWeibull(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextT(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextExponential(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testSampling(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIllegalArguments(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testPreconditions(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregationConsistency(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testNonUnitWeightSum(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testMoments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaTest(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testReSeed(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalMean(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBeta(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextWeibull(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextT(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDensities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.nistData(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBeta(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testReseed(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNexBytes(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextCauchy(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath644(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextF(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextCauchy(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testPaired(org.apache.commons.math3.stat.inference.TTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testNext(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testUnmatchedArrays(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testSampling(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextCauchy(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextChiSquare(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextGaussian(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextT(org.apache.commons.math3.random.Well512aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextF(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextT(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testConsistency(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testBinIndexOverflow(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullURL(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testConsistency(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape142(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextWeibull(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValue(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testQuantiles(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGetBinUpperBounds(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalVariance(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilityAgainstStackOverflow(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testIsSupportConnected(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextExponential(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testReseed(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextCauchy(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testZeroExpectedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGeneratorConfig(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNexBytes(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGamma(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextF(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSmallDf(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNexBytes(org.apache.commons.math3.random.Well19937aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMath280(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextChiSquare(org.apache.commons.math3.random.ISAACTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSmallDf(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testConsistency(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensity(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDensities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNexBytes(org.apache.commons.math3.random.Well512aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBeta(org.apache.commons.math3.random.Well512aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensity(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testConsistency(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMoments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape100(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape8(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testAppend(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPoisson(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPoisson(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions4(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testLongly(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalVariance(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testKernelOverrideUniform(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGamma(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPoisson(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGridTooFine(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHex(org.apache.commons.math3.random.Well1024aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testReseed(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testSampling(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHex(org.apache.commons.math3.random.Well44497bTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoad(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testInference(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportLowerBound(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testIncompatibleIntialMixture(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextCauchy(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNegativeMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextWeibull(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfect(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestIndependance(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testReseed(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullDoubleArray(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testDensity(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValueSummaryStatistics(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testDensity(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBeta(org.apache.commons.math3.random.Well1024aTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>3629ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='745'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution(org.apache.commons.math3.linear.HessenbergTransformerTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to setSeed(J)V with a call to setSeed([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextGaussian(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextF(org.apache.commons.math3.random.ISAACTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPoisson(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBeta(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.fitting.PolynomialFitterTest.testFit(org.apache.commons.math3.fitting.PolynomialFitterTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testKernelOverrideConstant(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPermutation(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextWeibull(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testReseed(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPoisson(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextCauchy(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSampling(org.apache.commons.math3.distribution.TDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBeta(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testWeightSumOverFlow(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGaussian(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testSampling(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPermutation(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextCauchy(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextExponential(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNexBytes(org.apache.commons.math3.random.Well44497aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextT(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testReseed(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextChiSquare(org.apache.commons.math3.random.Well1024aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMoments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHex(org.apache.commons.math3.random.Well44497aTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetCovarianceMatrix(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextT(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.MathUtilsTest.testPermutedArrayHash(org.apache.commons.math3.util.MathUtilsTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testReseed(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBeta(org.apache.commons.math3.random.Well44497bTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testPaired(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportUpperBound(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testProbability(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testSampling(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testReseed(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextExponential(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacity(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testCovarianceConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextT(org.apache.commons.math3.random.Well1024aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextT(org.apache.commons.math3.random.ISAACTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testDensities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensity(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveSingle(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextCauchy(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testConsistency(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions3(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testReseed(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPoisson(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHex(org.apache.commons.math3.random.Well512aTest)</name><time>47ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGamma(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextExponential(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextT(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextWeibull(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextT(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testCumulativeProbability(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextExponential(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testValues(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSampling(org.apache.commons.math3.distribution.FDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testProbability(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleT(org.apache.commons.math3.stat.inference.TTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPermutation(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHex(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testScaling(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testSampling(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.FDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPoisson(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testReseed(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testBeta(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextWeibull(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetScale(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testPreconditions(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNexBytes(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPoisson(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextWeibull(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testInitialMixture(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBeta(org.apache.commons.math3.random.Well19937aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testPreconditions(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPermutation(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextChiSquare(org.apache.commons.math3.random.Well44497aTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testReseed(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPermutation(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNexBytes(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMoments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testPreconditions(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPermutation(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfectNegative(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testExceptions(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testReseed(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeDistribution(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGamma(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testMoments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSampling(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullFile(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalMean(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportConnected(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextT(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape10(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testConsistency(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testFit(org.apache.commons.math3.optimization.fitting.PolynomialFitterTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextCauchy(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextGamma(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGamma(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNexBytes(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIssue942(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextWeibull(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testConsistency(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.LevyDistributionTest.testSampling(org.apache.commons.math3.distribution.LevyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextExponential(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextCauchy(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPermutation(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGamma(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testMoments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGamma(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestGoodnesOfFit(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextCauchy(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testSampling(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextWeibull(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextF(org.apache.commons.math3.random.Well1024aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextExponential(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHex(org.apache.commons.math3.random.Well19937aTest)</name><time>57ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextChiSquare(org.apache.commons.math3.random.Well44497bTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDensities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextChiSquare(org.apache.commons.math3.random.Well19937cTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextExponential(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>120ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>64ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensity(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMath785(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultiple(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensity(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextT(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBeta(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testCumulativeProbability(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquare(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextCauchy(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testStdErrorConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHex(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextExponential(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilitySpecial(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testParameterAccessors(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testExceptions(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testMaxIterationsPositive(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testSmallSamples(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPermutation(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBeta(org.apache.commons.math3.random.Well44497aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneWayAnovaUtils(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBeta(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextF(org.apache.commons.math3.random.Well512aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testDensities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextChiSquare(org.apache.commons.math3.random.Well512aTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPermutation(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextF(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextF(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbability2(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testFit(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testPreconditions(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetShape(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHex(org.apache.commons.math3.random.Well19937cTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well1024aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportUpperBound(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.TDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testMannWhitneyUSimple(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testPreconditionPositiveWeights(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testNexFail(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testAlpha(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testConsistency(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextWeibull(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPoisson(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquare(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNexBytes(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextF(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testThresholdPositive(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextF(org.apache.commons.math3.random.Well44497bTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testConsistency(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextChiSquare(org.apache.commons.math3.random.Well19937aTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBeta(org.apache.commons.math3.random.ISAACTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testCumulative(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPoisson(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPoisson(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>49ms</time></test><test><name>org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest.testWilcoxonSignedRankSimple(org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.FDistributionTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testSmallSamples(org.apache.commons.math3.stat.inference.TTestTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGridTooFat(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextWeibull(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHex(org.apache.commons.math3.random.ISAACTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregate(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testSerialization(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>98ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testConsistency(org.apache.commons.math3.distribution.TDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextChiSquare(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>58ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testConvergenceException(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPermutation(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleT(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testDoubleLoad(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensity(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportLowerBound(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextExponential(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPoisson(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPermutation(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextGamma(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextF(org.apache.commons.math3.random.Well19937aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testConsistency(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveXY(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNexBytes(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testNegativeObservedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRandom(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPermutation(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextF(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextExponential(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution(org.apache.commons.math3.linear.HessenbergTransformerTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextWeibull(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextT(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextExponential(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testSampling(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIllegalArguments(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testPreconditions(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregationConsistency(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testNonUnitWeightSum(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testMoments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaTest(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testReSeed(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalMean(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBeta(org.apache.commons.math3.random.Well19937cTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextWeibull(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextT(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDensities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.nistData(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBeta(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testReseed(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNexBytes(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextCauchy(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath644(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextF(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextCauchy(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testPaired(org.apache.commons.math3.stat.inference.TTestTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testNext(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testUnmatchedArrays(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testSampling(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextCauchy(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextChiSquare(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextGaussian(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextT(org.apache.commons.math3.random.Well512aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextF(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextT(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testConsistency(org.apache.commons.math3.distribution.FDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testBinIndexOverflow(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullURL(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>79ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testConsistency(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape142(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>65ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextWeibull(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValue(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testQuantiles(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGetBinUpperBounds(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalVariance(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>61ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilityAgainstStackOverflow(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testIsSupportConnected(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextExponential(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testReseed(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextCauchy(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testZeroExpectedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGeneratorConfig(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNexBytes(org.apache.commons.math3.random.Well19937cTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGamma(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextF(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSmallDf(org.apache.commons.math3.distribution.TDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNexBytes(org.apache.commons.math3.random.Well19937aTest)</name><time>43ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMath280(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextChiSquare(org.apache.commons.math3.random.ISAACTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSmallDf(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testConsistency(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensity(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDensities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNexBytes(org.apache.commons.math3.random.Well512aTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBeta(org.apache.commons.math3.random.Well512aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensity(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testConsistency(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>207ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMoments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape100(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>63ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape8(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>79ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>43ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testAppend(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPoisson(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPoisson(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions4(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testLongly(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalVariance(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testKernelOverrideUniform(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGamma(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPoisson(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGridTooFine(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHex(org.apache.commons.math3.random.Well1024aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testReseed(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testSampling(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHex(org.apache.commons.math3.random.Well44497bTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoad(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testInference(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportLowerBound(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testIncompatibleIntialMixture(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextCauchy(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNegativeMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextWeibull(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfect(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestIndependance(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testReseed(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullDoubleArray(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testDensity(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValueSummaryStatistics(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testDensity(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBeta(org.apache.commons.math3.random.Well1024aTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>5961ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded using field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>168</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>88</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to field org.apache.commons.math3.random.AbstractWell.index is replaced by the call to org.apache.commons.math3.random.AbstractWell::setSeed(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>49ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>74ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced access to v with an access to i3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to field v is replaced by access to local seed</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>45</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>54</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>55</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field v</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>65</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>67</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local l is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>68</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local l is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>73</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local i is replaced by access to field index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>55</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>55</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field iRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>55</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>41</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>55</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>access to local seed is replaced by access to field i2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>replaced call to currentTimeMillis with a call to nanoTime</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>29</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to min with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>27</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>36</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>47</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>53</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>64</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the access to v is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>the call to setSeed(J)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>28ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to clear()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::setSeed(J)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>the call to org.apache.commons.math3.random.AbstractWell::clear()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>29</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>replaced call to java/lang/Math::min with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 1812433253 with 1812433254</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>69</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 30 with 31</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>76</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 4294967295 with 4294967296</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>87</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>70</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced long multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><block>8</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>removed call to java/lang/System::currentTimeMillis</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>removed call to java/lang/System::identityHashCode</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>29</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed call to java/lang/Math::min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>38</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>38</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>49</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='745'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><block>5</block><killingTests>org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution(org.apache.commons.math3.linear.HessenbergTransformerTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::setSeed</description><testsExecutionTime><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextGaussian(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextF(org.apache.commons.math3.random.ISAACTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPoisson(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBeta(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.fitting.PolynomialFitterTest.testFit(org.apache.commons.math3.fitting.PolynomialFitterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testKernelOverrideConstant(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPermutation(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextWeibull(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testReseed(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPoisson(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextCauchy(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSampling(org.apache.commons.math3.distribution.TDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBeta(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testWeightSumOverFlow(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGaussian(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testSampling(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPermutation(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextCauchy(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextExponential(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNexBytes(org.apache.commons.math3.random.Well44497aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextT(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testReseed(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextChiSquare(org.apache.commons.math3.random.Well1024aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMoments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHex(org.apache.commons.math3.random.Well44497aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetCovarianceMatrix(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextT(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.util.MathUtilsTest.testPermutedArrayHash(org.apache.commons.math3.util.MathUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testReseed(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497bTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBeta(org.apache.commons.math3.random.Well44497bTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testPaired(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportUpperBound(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testProbability(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testSampling(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testReseed(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextExponential(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacity(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testCovarianceConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextT(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGaussian(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextT(org.apache.commons.math3.random.ISAACTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testDensities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensity(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveSingle(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextCauchy(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testConsistency(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testMoments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeRange(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions3(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testReseed(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPoisson(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHex(org.apache.commons.math3.random.Well512aTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGamma(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextExponential(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextT(org.apache.commons.math3.random.Well19937cTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextWeibull(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextT(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.MeanTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testCumulativeProbability(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testSampling(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextExponential(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testValues(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSampling(org.apache.commons.math3.distribution.FDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testProbability(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleT(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPermutation(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDensities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHex(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testScaling(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testSampling(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testMoments(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.FDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHex(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPoisson(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testReseed(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testBeta(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextWeibull(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetScale(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testPreconditions(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNexBytes(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPoisson(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextWeibull(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testInitialMixture(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBeta(org.apache.commons.math3.random.Well19937aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testPreconditions(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPermutation(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testPreconditions(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextChiSquare(org.apache.commons.math3.random.Well44497aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testReseed(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance1(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPermutation(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNexBytes(org.apache.commons.math3.random.Well44497bTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMoments(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testPreconditions(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPermutation(org.apache.commons.math3.random.Well512aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfectNegative(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testExceptions(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testReseed(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeDistribution(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNormalApproximateProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextGamma(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testMoments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSampling(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullFile(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalMean(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportConnected(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextT(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape10(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testConsistency(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testFit(org.apache.commons.math3.optimization.fitting.PolynomialFitterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextCauchy(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextGamma(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGamma(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNexBytes(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIssue942(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextWeibull(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testConsistency(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LevyDistributionTest.testSampling(org.apache.commons.math3.distribution.LevyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testSmallDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextExponential(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDensities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextCauchy(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPermutation(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGamma(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testMoments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGamma(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestGoodnesOfFit(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextCauchy(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testSampling(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGaussian(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextWeibull(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextF(org.apache.commons.math3.random.Well1024aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextExponential(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHex(org.apache.commons.math3.random.Well19937aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextChiSquare(org.apache.commons.math3.random.Well44497bTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDensities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextChiSquare(org.apache.commons.math3.random.Well19937cTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextExponential(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureHex(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>52ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensity(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testMath785(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultiple(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensity(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGaussian(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextT(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBeta(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testCumulativeProbability(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testLargeDegreesOfFreedom(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquare(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextCauchy(org.apache.commons.math3.random.Well19937aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance2(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testStdErrorConsistency(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHex(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testScale(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextExponential(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGamma(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilitySpecial(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testParameterAccessors(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testExceptions(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testMaxIterationsPositive(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testSmallSamples(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPermutation(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.moment.VarianceTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBeta(org.apache.commons.math3.random.Well44497aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneWayAnovaUtils(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBeta(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextF(org.apache.commons.math3.random.Well512aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testDensities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextChiSquare(org.apache.commons.math3.random.Well512aTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPermutation(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextF(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextF(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbability2(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testFit(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testPreconditions(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testGetShape(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions1(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHex(org.apache.commons.math3.random.Well19937cTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportUpperBound(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.TDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testMannWhitneyUSimple(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeRange(org.apache.commons.math3.random.Well1024aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testPreconditionPositiveWeights(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testNexFail(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureIntNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testAlpha(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testConsistency(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextWeibull(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet(org.apache.commons.math3.stat.inference.MannWhitneyUTestTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPoisson(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquare(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNexBytes(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextF(org.apache.commons.math3.random.Well19937cTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testThresholdPositive(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextF(org.apache.commons.math3.random.Well44497bTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit3(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testConsistency(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextChiSquare(org.apache.commons.math3.random.Well19937aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextGamma(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextIntPositiveRange(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBeta(org.apache.commons.math3.random.ISAACTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testCumulative(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPoisson(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPoisson(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest.testWilcoxonSignedRankSimple(org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero(org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testSmallSamples(org.apache.commons.math3.stat.inference.TTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGridTooFat(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextWeibull(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHex(org.apache.commons.math3.random.ISAACTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregate(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testSerialization(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testConsistency(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleTTest(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testQuantiles(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextChiSquare(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextSecureLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testConvergenceException(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPermutation(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testSwissFertility(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleT(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testDoubleLoad(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextGaussian(org.apache.commons.math3.random.Well44497aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testConsistency(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextLongPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDensity(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportLowerBound(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextExponential(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPoisson(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor(org.apache.commons.math3.util.ResizableDoubleArrayTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPermutation(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextGamma(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextF(org.apache.commons.math3.random.Well19937aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongNegativeRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testConsistency(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveXY(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNexBytes(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testNegativeObservedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRandom(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPermutation(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextF(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextExponential(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution(org.apache.commons.math3.linear.HessenbergTransformerTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareIndependence(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextWeibull(org.apache.commons.math3.random.Well19937cTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextT(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextExponential(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextLongNegativeRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testSampling(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testIllegalArguments(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testPreconditions(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregationConsistency(org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testNonUnitWeightSum(org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testGTestSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testMoments(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaTest(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testReSeed(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalMean(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextIntPositiveRange(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareZeroCount(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBeta(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testExtremeValues(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextWeibull(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextT(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDensities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.nistData(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBeta(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testReseed(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNexBytes(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextCauchy(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath644(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextF(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextCauchy(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.TTestTest.testPaired(org.apache.commons.math3.stat.inference.TTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testNext(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testUnmatchedArrays(org.apache.commons.math3.stat.inference.GTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testSampling(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextGaussian(org.apache.commons.math3.random.Well44497bTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextCauchy(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextChiSquare(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextGaussian(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextT(org.apache.commons.math3.random.Well512aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextF(org.apache.commons.math3.random.Well44497aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextT(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testConsistency(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMoments(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testBinIndexOverflow(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextIntPositiveRange(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullURL(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testConsistency(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape142(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextWeibull(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testPreconditions(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValue(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testQuantiles(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextLongNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGetBinUpperBounds(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalVariance(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>46ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilityAgainstStackOverflow(org.apache.commons.math3.distribution.TDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testIsSupportConnected(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions2(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextExponential(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testReseed(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextCauchy(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.stat.inference.GTestTest.testZeroExpectedCounts(org.apache.commons.math3.stat.inference.GTestTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testMoments(org.apache.commons.math3.distribution.TDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoreLargeValues(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGeneratorConfig(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNexBytes(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGamma(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedConsistency(org.apache.commons.math3.stat.descriptive.summary.ProductTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextF(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensities(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TDistributionTest.testSmallDf(org.apache.commons.math3.distribution.TDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNexBytes(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testMath280(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextChiSquare(org.apache.commons.math3.random.ISAACTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextGaussian(org.apache.commons.math3.random.Well512aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSmallDf(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextLongPositiveRange(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.Well44497bTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testConsistency(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHex(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testDensity(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDensities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.ChiSquaredDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts(org.apache.commons.math3.stat.inference.ChiSquareTestTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ParetoDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.ParetoDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNexBytes(org.apache.commons.math3.random.Well512aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBeta(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensity(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testConsistency(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilityExtremes(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMoments(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape100(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape8(org.apache.commons.math3.distribution.GammaDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.FDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testAppend(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextLongPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPoisson(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextIntPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.FDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.FDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPoisson(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testDensities(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions4(org.apache.commons.math3.distribution.TriangularDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextLongNegativeRange(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testLongly(org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextLongPositiveRange(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalVariance(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testKernelOverrideUniform(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportLowerBoundInclusive(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.CauchyDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well1024aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextGamma(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPoisson(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testGridTooFine(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.ExponentialDistributionTest.testDistributionClone(org.apache.commons.math3.distribution.ExponentialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHex(org.apache.commons.math3.random.Well1024aTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextIntNegativeRange(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testReseed(org.apache.commons.math3.random.Well44497aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextIntPositiveRange(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testSampling(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHex(org.apache.commons.math3.random.Well44497bTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoad(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextGaussian(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testInference(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.WeibullDistributionTest.testDensities(org.apache.commons.math3.distribution.WeibullDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportLowerBound(org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testIncompatibleIntialMixture(org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextCauchy(org.apache.commons.math3.random.Well44497bTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextUniformUniformPositiveBounds(org.apache.commons.math3.random.Well19937aTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testNegativeMean(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensityIntegrals(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextIntNegativeToPositiveRange(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextUniformUniformMaximalInterval(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextGaussian(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testSampling(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape(org.apache.commons.math3.distribution.LogNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextUniformUniformNegativeToPositiveBounds(org.apache.commons.math3.random.Well44497aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextWeibull(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.NormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfect(org.apache.commons.math3.stat.regression.SimpleRegressionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextGaussian(org.apache.commons.math3.random.ISAACTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestIndependance(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testDensities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportUpperBoundInclusive(org.apache.commons.math3.distribution.UniformRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextGamma(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextChiSquare(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testReseed(org.apache.commons.math3.random.Well1024aTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic(org.apache.commons.math3.stat.inference.TestUtilsTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetMean(org.apache.commons.math3.distribution.MultivariateNormalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.EmpiricalDistributionTest.testLoadNullDoubleArray(org.apache.commons.math3.random.EmpiricalDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testIllegalArguments(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testDensity(org.apache.commons.math3.distribution.EnumeratedRealDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextUniformUniformNegaiveBounds(org.apache.commons.math3.random.ISAACTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValueSummaryStatistics(org.apache.commons.math3.stat.inference.OneWayAnovaTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BetaDistributionTest.testDensity(org.apache.commons.math3.distribution.BetaDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBeta(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>3499ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>removed call to org/apache/commons/math3/random/AbstractWell::clear</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractWell.java</sourceFile><mutatedClass>org.apache.commons.math3.random.AbstractWell</mutatedClass><mutatedMethod>setSeed</mutatedMethod><methodDescription>([I)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>88</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.028409549486356805</suspValue><description>Removed assignment to member variable index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;III)V with a call to &#60;init&#62;(III)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>150ms</time></test></testsExecutionTime><patchExecutionTime>169ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;III)V with a call to &#60;init&#62;(III)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>209ms</time></test></testsExecutionTime><patchExecutionTime>253ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(J)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;III)V with a call to &#60;init&#62;(III)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>149ms</time></test></testsExecutionTime><patchExecutionTime>173ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;III)V with a call to &#60;init&#62;(III)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>151ms</time></test></testsExecutionTime><patchExecutionTime>173ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;III)V with a call to &#60;init&#62;(III)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>217ms</time></test></testsExecutionTime><patchExecutionTime>237ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;III)V with a call to &#60;init&#62;(III)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>149ms</time></test></testsExecutionTime><patchExecutionTime>170ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;([I)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(III)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed call to org/apache/commons/math3/random/Well19937c::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field numberOfSuccesses is replaced by access to local populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field populationSize is replaced by access to local populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>103</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field sampleSize is replaced by access to local populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field numberOfSuccesses is replaced by access to local numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field populationSize is replaced by access to local numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>103</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field sampleSize is replaced by access to local numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field numberOfSuccesses is replaced by access to local sampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field populationSize is replaced by access to local sampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>103</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>access to field sampleSize is replaced by access to local sampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>44</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>57</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>58</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>74</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>75</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>92</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>97</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>77ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>102</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local populationSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>44</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>57</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>58</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>74</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>75</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>92</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local numberOfSuccesses is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>97</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local populationSize is replaced by local sampleSize to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>102</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>local sampleSize is replaced by local numberOfSuccesses to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>45</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>59</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>76</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Substituted NaN with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>45</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>59</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>76</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>45</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>59</index><block>7</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>76</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Removed assignment to member variable numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Removed assignment to member variable numericalVarianceIsCalculated</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>93</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Removed assignment to member variable numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>98</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Removed assignment to member variable populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;III)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>103</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1889822365046136</suspValue><description>Removed assignment to member variable sampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local n is replaced by local N to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>66ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>88ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local m is replaced by local N to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local n is replaced by local N to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>28</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>29</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local m is replaced by local N to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>32</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>33</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>35</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local n is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local m is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>25</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local n is replaced by local m to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>28</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>29</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local m is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>32</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>33</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>35</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local N is replaced by local n to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local n is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local m is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local N is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local n is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>28</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local N is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>42ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local m is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>32</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local N is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local N is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>35</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>access to local N is replaced by access to field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>58ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getPopulationSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning local N</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning local N</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning local m</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>36</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>51ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>26</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>30</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>16</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>40</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/distribution/HypergeometricDistribution::calculateNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>calculateNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/distribution/HypergeometricDistribution::calculateNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to numberOfSuccesses is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to numberOfSuccesses is guarded using field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numberOfSuccesses is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numberOfSuccesses is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getPopulationSize()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numberOfSuccesses is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numberOfSuccesses is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSupportLowerBound()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numberOfSuccesses is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSupportUpperBound()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced access to numberOfSuccesses with an access to populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced access to numberOfSuccesses with an access to sampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to numberOfSuccesses is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to numberOfSuccesses is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/HypergeometricDistribution::getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumberOfSuccesses</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>53ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='19'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>6</index><block>15</block><killingTests/><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>50ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>188ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getPopulationSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>124ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced integer multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>13</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/distribution/HypergeometricDistribution::getNumericalMean</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalMean</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/distribution/HypergeometricDistribution::getNumericalMean</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVarianceIsCalculated is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVariance is guarded using value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVarianceIsCalculated is guarded using field numericalVarianceIsCalculated</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVariance is guarded using field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numericalVarianceIsCalculated is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::isSupportConnected()Z</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numericalVariance is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumericalMean()D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>53ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numericalVariance is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumericalVariance()D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.numericalVariance is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::calculateNumericalVariance()D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to calculateNumericalVariance with a call to getNumericalMean</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to calculateNumericalVariance with a call to getNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::calculateNumericalVariance()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVarianceIsCalculated is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVariance is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVarianceIsCalculated is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the access to numericalVariance is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to calculateNumericalVariance()D is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to calculateNumericalVariance()D is guarded returning field numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::calculateNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>43ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>60ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/distribution/HypergeometricDistribution::getNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>52ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>16</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/distribution/HypergeometricDistribution::getNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Removed assignment to member variable numericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getNumericalVariance</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Removed assignment to member variable numericalVarianceIsCalculated</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to populationSize is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to populationSize is guarded using field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.populationSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.populationSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getPopulationSize()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.populationSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.populationSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSupportLowerBound()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.populationSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSupportUpperBound()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced access to populationSize with an access to numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced access to populationSize with an access to sampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to populationSize is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to populationSize is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/HypergeometricDistribution::getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getPopulationSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to sampleSize is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to sampleSize is guarded using field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.sampleSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.sampleSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getPopulationSize()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.sampleSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.sampleSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSupportLowerBound()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to field org.apache.commons.math3.distribution.HypergeometricDistribution.sampleSize is replaced by the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSupportUpperBound()I</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced access to sampleSize with an access to numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced access to sampleSize with an access to populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to sampleSize is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the access to sampleSize is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/HypergeometricDistribution::getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSampleSize</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>12</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to max with a call to min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getPopulationSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getPopulationSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning field populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning field populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getPopulationSize()I is guarded returning field populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>12</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::max with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>12</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>13</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/HypergeometricDistribution::getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportLowerBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to min with a call to max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getPopulationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getNumberOfSuccesses with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to getSampleSize with a call to getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>11ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getNumberOfSuccesses()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to org.apache.commons.math3.distribution.HypergeometricDistribution::getSampleSize()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning field numberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getNumberOfSuccesses()I is guarded returning field populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>the call to getSampleSize()I is guarded returning field populationSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>7</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::min with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getNumberOfSuccesses</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/distribution/HypergeometricDistribution::getSampleSize</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/HypergeometricDistribution::getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>HypergeometricDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.HypergeometricDistribution</mutatedClass><mutatedMethod>getSupportUpperBound</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>Substituted 19937 with 19938</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>Substituted 70 with 71</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>Substituted 179 with 180</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03578281334822566</suspValue><description>Substituted 449 with 450</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>30</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i1 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i2 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>50</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>52</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i3 is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>68</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>131</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>139</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>146</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded using field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>157</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>157</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>157</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to field index is replaced by access to local indexRm2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z0 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>167</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>177</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local bits to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local bits is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z0 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>167</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>177</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local bits is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z0 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>167</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>177</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local indexRm2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local bits is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z0 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>167</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>177</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local v0 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local bits is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z0 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>167</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>177</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM1 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_4</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local bits is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local v0 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM2 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local vM3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>65ms</time></test></testsExecutionTime><patchExecutionTime>71ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z0 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z1 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z2 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z3 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm2 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local indexRm1 is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>167</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>177</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local z4 is replaced by local vM2 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_5</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>local bits is replaced by local vM3 to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z0 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>44ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local bits is replaced by access to field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z0 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local bits is replaced by access to field M1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z0 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local bits is replaced by access to field M2</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>63</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>69</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>76</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>77</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local v0 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>81</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>82</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>90</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>93</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>94</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local vM3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>102</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>103</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>108</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z0 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>109</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>110</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>115</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>116</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>121</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>122</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>134</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z3 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>140</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>141</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>147</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm2 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>156</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local indexRm1 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>160</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>161</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>170</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>171</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>180</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local z4 is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>182</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>access to local bits is replaced by access to field M3</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm1 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm2 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>30</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i1 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i2 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>50</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>52</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i3 is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>68</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>131</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>139</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>146</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm1 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm2 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>30</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i1 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i2 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>50</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>52</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i3 is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>68</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>131</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>139</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>146</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning local bits</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm1 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to iRm2 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>34ms</time></test></testsExecutionTime><patchExecutionTime>92ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>30</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i1 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>32</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>41</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i2 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>43</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>50</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>52</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to i3 is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>54</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>62</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>68</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>131</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>100</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>133</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to index is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>139</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>146</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>the access to v is guarded returning field K</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>60</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted -2147483648 with -2147483647</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 2147483647 with -2147483648</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>78</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 25 with 26</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>83</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 27 with 28</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>91</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 9 with 10</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>95</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>111</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 9 with 10</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>117</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 21 with 22</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>123</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 21 with 22</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>150</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted -2147483648 with -2147483647</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>162</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 7 with 8</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>164</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted -462547200 with -462547199</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>172</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 15 with 16</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>174</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted -1685684224 with -1685684223</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>181</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Substituted 32 with 33</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>65</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>72</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>84</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>86</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>96</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>97</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>98</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>104</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>112</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>113</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>114</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>118</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>119</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>120</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>124</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>126</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>151</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>163</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>165</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>166</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>173</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>175</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>176</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced XOR with AND</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>183</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>184</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Replaced Unsigned Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>185</index><block>1</block><killingTests>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>replaced int return with 0 for org/apache/commons/math3/random/Well19937c::next</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>185</index><block>1</block><killingTests>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextLong2(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Well19937c.java</sourceFile><mutatedClass>org.apache.commons.math3.random.Well19937c</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>157</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.07352146220938077</suspValue><description>Removed assignment to member variable index</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>access to field random is replaced by access to local rng</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataImpl::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>Removed assignment to member variable randomData</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/math3/random/RandomGenerator;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.05997601439040672</suspValue><description>Removed assignment to member variable random</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>86</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local mu is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>89</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local mu is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>92</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local sigma is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>95</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local sigma is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>98</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local sigma is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>115</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local p is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>117</index><block>18</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local p is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>123</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>124</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>125</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>132</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local lower is replaced by local upper to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>147</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>149</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local p to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>152</index><block>19</block><killingTests>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>153</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>154</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>157</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local p to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>160</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>161</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local upper is replaced by local lower to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>167</index><block>20</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local p to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>172</index><block>20</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local upper is replaced by local lower to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>176</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local p is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>177</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local lower is replaced by local upper to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>178</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local upper is replaced by local lower to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>86</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local mu is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>89</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local mu is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>92</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local sigma is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>95</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local sigma is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>98</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local sigma is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>115</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local p is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>117</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local p is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>123</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>124</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>125</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>147</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>149</index><block>19</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local mu to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>152</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>153</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>154</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>157</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local mu to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>160</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>167</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local mu to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>176</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local p is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>106ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>123</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>124</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>125</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>147</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>149</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local sigma to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>152</index><block>19</block><killingTests>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>153</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>154</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>157</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local sigma to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>160</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>167</index><block>20</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local sigma to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>131</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>115ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>147</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>149</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local tmp to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>152</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local mu is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>153</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local k is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>154</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local sigma is replaced by local tmp to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>157</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local k to be defined</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>160</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_3</mutator><index>167</index><block>20</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local tmp is replaced by local k to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>replaced call to getSupportLowerBound with a call to sample</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>118</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>61</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>replaced call to getSupportUpperBound with a call to sample</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>87</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>90</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>54ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>93</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to isInfinite with a call to isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>96</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to isNaN with a call to isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to cosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to sinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>68ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to tanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='14'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>53ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>86ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to acosh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to asinh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to atanh</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to signum</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to nextUp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to sqrt with a call to expm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to sqrt with a call to expm1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to ceil with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>the call to org.apache.commons.math3.distribution.AbstractIntegerDistribution::getSupportLowerBound()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>118</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>61</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>the call to org.apache.commons.math3.distribution.AbstractIntegerDistribution::getSupportUpperBound()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>76</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to org.apache.commons.math3.distribution.AbstractIntegerDistribution::getNumericalMean()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to org.apache.commons.math3.distribution.AbstractIntegerDistribution::getNumericalVariance()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>179</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to org.apache.commons.math3.distribution.AbstractIntegerDistribution::solveInverseCumulativeProbability(DII)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>the call to getSupportLowerBound()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>118</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>61</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>the call to getSupportUpperBound()I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>76</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to getNumericalMean()D is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to getNumericalVariance()D is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>179</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to solveInverseCumulativeProbability(DII)I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>118</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>61</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>the call to getSupportUpperBound()I is guarded returning local lower</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>76</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to getNumericalMean()D is guarded returning local lower</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to getNumericalVariance()D is guarded returning local lower</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>179</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to solveInverseCumulativeProbability(DII)I is guarded returning local lower</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>76</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to getNumericalMean()D is guarded returning local upper</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>81</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to getNumericalVariance()D is guarded returning local upper</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>179</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>the call to solveInverseCumulativeProbability(DII)I is guarded returning local upper</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>82</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::sqrt with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to org/apache/commons/math3/util/FastMath::sqrt with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to java/lang/Math::ceil with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>179</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::solveInverseCumulativeProbability with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>135</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>164</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>57</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>Changed increment from -1 to 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>31</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>41</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>Substituted -2147483648 with -2147483647</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>99</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>Substituted 0.0 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>102</index><block>16</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>80ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>907ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>105</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>114</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>146</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 1.0 with 2.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>170</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>116</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>118</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>126</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>127</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>148</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>155</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>156</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced double addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>171</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>4</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><block>9</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>48ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><block>11</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>132ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>1044ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><block>12</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>53ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>82ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>966ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><block>13</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>52ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>74ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>64ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>42ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>44ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>136ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>43ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>1702ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><block>14</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>119ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>1133ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><block>15</block><killingTests>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>111</index><block>17</block><killingTests>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>70ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='63'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>164</index><block>19</block><killingTests/><suspValue>0.1259881576697424</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>129ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>1108ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::getSupportLowerBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>61</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::getSupportUpperBound</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>76</index><block>11</block><killingTests>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::getNumericalMean</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>81</index><block>11</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::getNumericalVariance</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>81ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>744ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>82</index><block>11</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>51ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>80ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>855ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>87</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>90</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>93</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to java/lang/Double::isInfinite</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>96</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to java/lang/Double::isNaN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>119</index><block>18</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>39ms</time></test></testsExecutionTime><patchExecutionTime>69ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>168</index><block>20</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to java/lang/Math::ceil</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>179</index><block>20</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::solveInverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>180</index><block>20</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/AbstractIntegerDistribution::inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>33</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>42</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>68</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>88</index><block>11</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>75ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>106ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>40ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>45ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>55ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>141ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>1611ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>91</index><block>12</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>111ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>135ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>1022ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>94</index><block>13</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>139ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>1101ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>97</index><block>14</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>79ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>1048ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>101</index><block>15</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>38ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>19ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>42ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>104ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>44ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>62ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>28ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>132ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>39ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>61ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>41ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>1858ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='70'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>111</index><block>17</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>14ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>32ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>13ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>35ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>26ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>25ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>33ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>37ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>29ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>133ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>34ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>9ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>24ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>12ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>1335ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>33</index><block>4</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>42</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>68</index><block>9</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testConsistencyAtSupportBounds(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>88</index><block>11</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>91</index><block>12</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>94</index><block>13</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>97</index><block>14</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>101</index><block>15</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>111</index><block>17</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>135</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='63'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>164</index><block>19</block><killingTests/><suspValue>0.1259881576697424</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextPascal(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>17ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextPascal(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextPascal(org.apache.commons.math3.random.Well512aTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextPascal(org.apache.commons.math3.random.Well44497bTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextBinomial(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PoissonDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextHypergeometric(org.apache.commons.math3.random.Well1024aTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497bTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextBinomial(org.apache.commons.math3.random.Well19937cTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextBinomial(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextHypergeometric(org.apache.commons.math3.random.Well44497aTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextZipf(org.apache.commons.math3.random.ISAACTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextZipf(org.apache.commons.math3.random.Well512aTest)</name><time>16ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextBinomial(org.apache.commons.math3.random.Well44497bTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextPascal(org.apache.commons.math3.random.ISAACTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextPascal(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextBinomial(org.apache.commons.math3.random.Well1024aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextHypergeometric(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextBinomial(org.apache.commons.math3.random.Well512aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling(org.apache.commons.math3.distribution.ZipfDistributionTest)</name><time>8ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextZipf(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well512aTest.testNextHypergeometric(org.apache.commons.math3.random.Well512aTest)</name><time>7ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextPascal(org.apache.commons.math3.random.Well44497aTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextPascal(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextPascal(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>99ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextZipf(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>10ms</time></test><test><name>org.apache.commons.math3.random.Well44497bTest.testNextZipf(org.apache.commons.math3.random.Well44497bTest)</name><time>15ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextHypergeometric(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.ISAACTest.testNextBinomial(org.apache.commons.math3.random.ISAACTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testSampling(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>27ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextBinomial(org.apache.commons.math3.random.Well19937aTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextPascal(org.apache.commons.math3.random.Well19937aTest)</name><time>36ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextBinomial(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextZipf(org.apache.commons.math3.random.Well19937aTest)</name><time>21ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextBinomial(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextZipf(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>23ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>140ms</time></test><test><name>org.apache.commons.math3.random.RandomDataGeneratorTest.testNextZipf(org.apache.commons.math3.random.RandomDataGeneratorTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.BinomialDistributionTest)</name><time>1ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937cTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextBinomial(org.apache.commons.math3.random.Well44497aTest)</name><time>4ms</time></test><test><name>org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.PascalDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextPascal(org.apache.commons.math3.random.Well19937cTest)</name><time>30ms</time></test><test><name>org.apache.commons.math3.random.AbstractRandomGeneratorTest.testNextHypergeometric(org.apache.commons.math3.random.AbstractRandomGeneratorTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextPascal(org.apache.commons.math3.random.Well1024aTest)</name><time>31ms</time></test><test><name>org.apache.commons.math3.random.MersenneTwisterTest.testNextZipf(org.apache.commons.math3.random.MersenneTwisterTest)</name><time>20ms</time></test><test><name>org.apache.commons.math3.random.Well44497aTest.testNextZipf(org.apache.commons.math3.random.Well44497aTest)</name><time>11ms</time></test><test><name>org.apache.commons.math3.random.Well1024aTest.testNextZipf(org.apache.commons.math3.random.Well1024aTest)</name><time>22ms</time></test><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>0ms</time></test><test><name>org.apache.commons.math3.random.BitsStreamGeneratorTest.testNextBinomial(org.apache.commons.math3.random.BitsStreamGeneratorTest)</name><time>6ms</time></test><test><name>org.apache.commons.math3.random.RandomGeneratorFactoryTest.testNextHypergeometric(org.apache.commons.math3.random.RandomGeneratorFactoryTest)</name><time>5ms</time></test><test><name>org.apache.commons.math3.random.Well19937cTest.testNextZipf(org.apache.commons.math3.random.Well19937cTest)</name><time>18ms</time></test><test><name>org.apache.commons.math3.random.Well19937aTest.testNextHypergeometric(org.apache.commons.math3.random.Well19937aTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>940ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.10846522890932808</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>13ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>135</index><block>18</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>164</index><block>19</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>180</index><block>20</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>inverseCumulativeProbability</mutatedMethod><methodDescription>(D)I</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>57</index><block>9</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11322770341445956</suspValue><description>Removed increment -1</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the access to random is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the access to random is guarded using field random</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>replaced call to nextDouble with a call to nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the call to org.apache.commons.math3.random.RandomGenerator::nextDouble()D is guarded using default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the call to org.apache.commons.math3.distribution.AbstractIntegerDistribution::inverseCumulativeProbability(D)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>5</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the access to random is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the call to nextDouble()D is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>the call to inverseCumulativeProbability(D)I is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>28</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>removed call to org/apache/commons/math3/random/RandomGenerator::nextDouble</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>28</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>removed call to org/apache/commons/math3/distribution/AbstractIntegerDistribution::inverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/AbstractIntegerDistribution::sample</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>28</block><killingTests>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test><test><name>org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling(org.apache.commons.math3.distribution.GeometricDistributionTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>21</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local lower is replaced by local upper to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>21</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local upper is replaced by local lower to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>60</index><block>27</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>local upper is replaced by local lower to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>21</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><block>21</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>21</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>61</index><block>27</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced int return with 0 for org/apache/commons/math3/distribution/AbstractIntegerDistribution::solveInverseCumulativeProbability</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>0ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>7</index><block>21</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>7</index><block>21</block><killingTests/><suspValue>0.11952286093343936</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>AbstractIntegerDistribution.java</sourceFile><mutatedClass>org.apache.commons.math3.distribution.AbstractIntegerDistribution</mutatedClass><mutatedMethod>solveInverseCumulativeProbability</mutatedMethod><methodDescription>(DII)I</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><block>27</block><killingTests>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</killingTests><suspValue>0.11952286093343936</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test><test><name>org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities(org.apache.commons.math3.distribution.UniformIntegerDistributionTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>6</index><block>5</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local b is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>9</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>access to local a is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>11</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>replaced int return with 0 for org/apache/commons/math3/util/FastMath::max</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>max</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>6</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.051231551957855996</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>25ms</time></test></testsExecutionTime><patchExecutionTime>173ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>local a is replaced by local b to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>local b is replaced by local a to be used</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_MAX_INDEX</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field EXP_INT_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field LN_MANT_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field EXP_FRAC_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local a is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>access to local b is replaced by access to field SINE_TABLE_LEN</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>59ms</time></test></testsExecutionTime><patchExecutionTime>80ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>replaced int return with 0 for org/apache/commons/math3/util/FastMath::min</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>min</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>3429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.034964180063753285</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>access to local a is replaced by access to field PI</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>access to local a is replaced by access to field E</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>access to local a is replaced by access to field LOG_MAX_VALUE</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>access to local a is replaced by access to field LN_2_A</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>access to local a is replaced by access to field LN_2_B</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to sin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to cos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to tan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to asin</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to acos</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to atan</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to toRadians</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to toDegrees</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_8</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to exp</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_9</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to sqrt with a call to log</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced call to java/lang/Math::sqrt with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>removed call to java/lang/Math::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>76ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</name><time>190ms</time></test></testsExecutionTime><patchExecutionTime>283ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>61ms</time></test><test><name>org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses(org.apache.commons.math3.util.FastMathTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>103ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FastMath.java</sourceFile><mutatedClass>org.apache.commons.math3.util.FastMath</mutatedClass><mutatedMethod>sqrt</mutatedMethod><methodDescription>(D)D</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02242242646654375</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/util/FastMath::sqrt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02734854943722097</suspValue><description>Substituted NaN with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02734854943722097</suspValue><description>Removed assignment to member variable nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02734854943722097</suspValue><description>Substituted NaN with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02734854943722097</suspValue><description>Removed assignment to member variable nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>access to local high is replaced by access to field serialVersionUID</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>replaced call to next with a call to nextInt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>replaced call to next with a call to nextInt</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>the call to org.apache.commons.math3.random.BitsStreamGenerator::next(I)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>the call to org.apache.commons.math3.random.BitsStreamGenerator::next(I)I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>the call to next(I)I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>the call to next(I)I is guarded returning default value 0.D</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>32ms</time></test></testsExecutionTime><patchExecutionTime>95ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>the call to next(I)I is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>the call to next(I)I is guarded returning field nextGaussian</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>replaced call to org/apache/commons/math3/random/BitsStreamGenerator::next with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>79ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>replaced call to org/apache/commons/math3/random/BitsStreamGenerator::next with argument</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>Substituted 26 with 27</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>Substituted 26 with 27</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>Substituted 26 with 27</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>Substituted 2.220446049250313E-16 with 1.0</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>1</block><killingTests/><suspValue>0.04767312946227962</suspValue><description>Replaced bitwise OR with AND</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>Replaced double multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>removed call to org/apache/commons/math3/random/BitsStreamGenerator::next</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>removed call to org/apache/commons/math3/random/BitsStreamGenerator::next</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>1</block><killingTests/><suspValue>0.04767312946227962</suspValue><description>replaced double return with 0.0d for org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BitsStreamGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.BitsStreamGenerator</mutatedClass><mutatedMethod>nextDouble</mutatedMethod><methodDescription>()D</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.04767312946227962</suspValue><description>replaced return of double value with -(x + 1) for org/apache/commons/math3/random/BitsStreamGenerator::nextDouble</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>14ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>100ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Lorg/apache/commons/math3/random/RandomGenerator;)V</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>removed call to org/apache/commons/math3/random/RandomDataGenerator::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataImpl.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataImpl</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.03406013516450858</suspValue><description>Removed assignment to member variable delegate</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02903739520695205</suspValue><description>replaced access to rand with an access to secRand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>33ms</time></test></testsExecutionTime><patchExecutionTime>102ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02903739520695205</suspValue><description>replaced access to secRand with an access to rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02903739520695205</suspValue><description>Removed assignment to member variable rand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>RandomDataGenerator.java</sourceFile><mutatedClass>org.apache.commons.math3.random.RandomDataGenerator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</killingTests><suspValue>0.02903739520695205</suspValue><description>Removed assignment to member variable secRand</description><testsExecutionTime><test><name>org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath1021(org.apache.commons.math3.distribution.HypergeometricDistributionTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
</mutations>
