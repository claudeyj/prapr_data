<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>50</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to field recordNumber is replaced by access to local recordNumber</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to field EMPTY_STRING_ARRAY is replaced by access to local values</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to field values is replaced by access to local values</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to field mapping is replaced by access to local mapping</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>access to field comment is replaced by access to local comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>Removed assignment to member variable recordNumber</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>Removed assignment to member variable values</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>Removed assignment to member variable mapping</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;J)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.14907119849998599</suspValue><description>Removed assignment to member variable comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>MethodNameMutator_0</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>MethodNameMutator_1</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.csv.TokenMatchersTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>MethodNameMutator_2</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.csv.CSVFormatTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the access to mapping is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>21ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to mapping is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to values is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the access to mapping is guarded using field mapping</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to mapping is guarded using field mapping</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to values is guarded using field EMPTY_STRING_ARRAY</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to field org.apache.commons.csv.CSVRecord.values is replaced by the call to org.apache.commons.csv.CSVRecord::values()[Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>access to local name is replaced by access to field comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>17</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to get with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to intValue with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to java.util.Map::get(Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to java.lang.Integer::intValue()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the access to mapping is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to mapping is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to values is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the access to mapping is guarded returning local name</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to mapping is guarded returning local name</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to values is guarded returning local name</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>the access to mapping is guarded returning field comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to mapping is guarded returning field comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the access to values is guarded returning field comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to intValue()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning local name</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to intValue()I is guarded returning local name</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning field comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to intValue()I is guarded returning field comment</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced call to java/util/Map::get with argument</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>34</index><block>7</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVRecord::get</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to java/util/Map::get</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to java/lang/Integer::intValue</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>24</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.35355339059327373</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>24</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><block>7</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>mutated return of Object value for org/apache/commons/csv/CSVRecord::get to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord(org.apache.commons.csv.CSVRecordTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
</mutations>
