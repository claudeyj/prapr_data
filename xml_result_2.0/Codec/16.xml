<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutatorSecondPhase_0</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to &#60;init&#62;(IIIIB)V with a call to &#60;init&#62;(IIIIB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>71ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>62ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/String;Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/Throwable;)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to encodeSize is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to encodeSize is guarded using local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_ENCODE_TABLE with an access to CHUNK_SEPARATOR</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>31</index><block>4</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_DECODE_TABLE with an access to CHUNK_SEPARATOR</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to encodeSize with an access to decodeSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_ENCODE_TABLE with an access to DECODE_TABLE</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>31</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_DECODE_TABLE with an access to DECODE_TABLE</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_ENCODE_TABLE with an access to ENCODE_TABLE</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>31</index><block>4</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_DECODE_TABLE with an access to ENCODE_TABLE</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_ENCODE_TABLE with an access to HEX_DECODE_TABLE</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>31</index><block>4</block><killingTests/><suspValue>0.5773502691896258</suspValue><description>replaced access to HEX_DECODE_TABLE with an access to HEX_ENCODE_TABLE</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field HEX_ENCODE_TABLE is replaced by access to local lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>27</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field encodeTable is replaced by access to local lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>31</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field HEX_DECODE_TABLE is replaced by access to local lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>32</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to field decodeTable is replaced by access to local lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>303</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>130</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.2</suspValue><description>access to field encodeSize is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>304</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>135</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.2</suspValue><description>access to field lineSeparator is replaced by access to local lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to field encodeSize is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>144</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to field decodeSize is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>149</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to org.apache.commons.codec.binary.Base32::isInAlphabet(B)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to encodeSize is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to encodeSize is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>141</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to encodeSize is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>149</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to isInAlphabet(B)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>149</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to isInAlphabet(B)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>149</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to isInAlphabet(B)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>149</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to isInAlphabet(B)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>149</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to isInAlphabet(B)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>49</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>160</index><block>13</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>1.0</suspValue><description>removed call to java/lang/IllegalArgumentException::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>2</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>129</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.2</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>142</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>143</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>87ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>150</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><block>12</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>149</index><block>11</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/codec/binary/Base32::isInAlphabet</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>98ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>60ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>143ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>98ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>461ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>152</index><block>12</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/codec/binary/Base32::isWhiteSpace</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>150</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>153</index><block>12</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>150</index><block>11</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>64ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>69ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>124ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>126ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>485ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>153</index><block>12</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>49</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>49</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>27</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>Removed assignment to member variable encodeTable</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>32</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.5773502691896258</suspValue><description>Removed assignment to member variable decodeTable</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>130</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.2</suspValue><description>Removed assignment to member variable encodeSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>135</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.2</suspValue><description>Removed assignment to member variable lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I[BZB)V</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>144</index><block>11</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Removed assignment to member variable decodeSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(Z)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I[BZ)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I[BZ)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I[BZ)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I[BZ)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(ZB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(ZB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(ZB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(ZB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(Z)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I[BZ)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I[BZ)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(ZB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(ZB)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(Z)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(Z)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(Z)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(Z)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>replaced call to &#60;init&#62;(I[BZB)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ZB)V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.7071067811865475</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>7</index><block>16</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to decodeTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to decodeTable is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>7</index><block>16</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to decodeTable is guarded using field CHUNK_SEPARATOR</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to decodeTable is guarded using field CHUNK_SEPARATOR</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>7</index><block>16</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>replaced access to decodeTable with an access to encodeTable</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>93ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>59ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>133ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>81ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>464ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to decodeTable with an access to encodeTable</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>7</index><block>16</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to decodeTable with an access to lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to decodeTable with an access to lineSeparator</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>7</index><block>16</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to decodeTable is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to decodeTable is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>23</index><block>19</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>replaced boolean return with false for org/apache/commons/codec/binary/Base32::isInAlphabet</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>87ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>61ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>122ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>37ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>74ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>454ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>23</index><block>19</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced boolean return with true for org/apache/commons/codec/binary/Base32::isInAlphabet</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>16</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>18</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>65ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>61ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>212ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>139ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>0ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>523ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>19</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>15</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>82ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>63ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>160ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>83ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>483ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>16</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>68ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>65ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>141ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>92ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>441ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>15</index><block>17</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>73ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>76ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>8ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>186ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>91ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>6ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>567ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>15</index><block>17</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>4</index><block>15</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>106ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>63ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>170ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>106ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>534ms</patchExecutionTime></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='31'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>9</index><block>16</block><killingTests/><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesHex(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>72ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Chunked(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>68ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>124ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>153ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32Samples(org.apache.commons.codec.binary.Base32Test)</name><time>1ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testRead0(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize(org.apache.commons.codec.binary.Base32OutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testRandomBytes(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32HexSamples(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test><test><name>org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument(org.apache.commons.codec.binary.Base32InputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>509ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>4</index><block>15</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>9</index><block>16</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Base32.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.Base32</mutatedClass><mutatedMethod>isInAlphabet</mutatedMethod><methodDescription>(B)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><block>19</block><killingTests>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test><test><name>org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field PAD is replaced by access to local pad</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field unencodedBlockSize is replaced by access to local unencodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field encodedBlockSize is replaced by access to local unencodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>50</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field lineLength is replaced by access to local unencodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field chunkSeparatorLength is replaced by access to local unencodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>60</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field pad is replaced by access to local pad</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field unencodedBlockSize is replaced by access to local encodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field encodedBlockSize is replaced by access to local encodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>50</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field lineLength is replaced by access to local encodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field chunkSeparatorLength is replaced by access to local encodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field unencodedBlockSize is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field encodedBlockSize is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>50</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field lineLength is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_2</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>access to field chunkSeparatorLength is replaced by access to local lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>39ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local unencodedBlockSize is replaced by local encodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local lineLength is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local chunkSeparatorLength is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local lineLength is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>54</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local chunkSeparatorLength is replaced by local unencodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local unencodedBlockSize is replaced by local lineLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local lineLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local lineLength is replaced by local encodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local chunkSeparatorLength is replaced by local encodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local lineLength is replaced by local encodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local lineLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local lineLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>54</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local chunkSeparatorLength is replaced by local encodedBlockSize to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local unencodedBlockSize is replaced by local chunkSeparatorLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local chunkSeparatorLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local lineLength is replaced by local chunkSeparatorLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local chunkSeparatorLength is replaced by local lineLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local lineLength is replaced by local chunkSeparatorLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local chunkSeparatorLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local encodedBlockSize is replaced by local chunkSeparatorLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>54</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>local chunkSeparatorLength is replaced by local lineLength to be used</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Substituted 61 with 62</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Replaced integer division with multiplication</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>4</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Replaced integer multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>82ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Removed assignment to member variable PAD</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Removed assignment to member variable unencodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Removed assignment to member variable encodedBlockSize</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>50</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Removed assignment to member variable lineLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>55</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Removed assignment to member variable chunkSeparatorLength</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>BaseNCodec.java</sourceFile><mutatedClass>org.apache.commons.codec.binary.BaseNCodec</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIIIB)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>60</index><block>5</block><killingTests>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</killingTests><suspValue>0.09090909090909091</suspValue><description>Removed assignment to member variable pad</description><testsExecutionTime><test><name>org.apache.commons.codec.binary.Base32Test.testCodec200(org.apache.commons.codec.binary.Base32Test)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
</mutations>
