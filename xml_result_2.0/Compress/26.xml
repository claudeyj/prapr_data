<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local numToSkip is replaced by local available to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>local numToSkip is replaced by local available to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>19</index><block>1</block><killingTests/><suspValue>0.23904572186687872</suspValue><description>local skipped is replaced by local numToSkip to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>37</index><block>4</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local available is replaced by local numToSkip to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>104</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>local numToSkip is replaced by local available to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>81ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>19</index><block>1</block><killingTests/><suspValue>0.23904572186687872</suspValue><description>local skipped is replaced by local available to be used</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>the call to java.io.InputStream::skip(J)J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>the call to skip(J)J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>the call to skip(J)J is guarded returning local numToSkip</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>the call to skip(J)J is guarded returning local available</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>replaced call to java/io/InputStream::skip with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>78ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>1</block><killingTests/><suspValue>0.23904572186687872</suspValue><description>Substituted 0 with 1</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><block>4</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>Replaced long subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>1</block><killingTests/><suspValue>0.23904572186687872</suspValue><description>negated conditional</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>removed call to java/io/InputStream::skip</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced long return with 0 for org/apache/commons/compress/utils/IOUtils::skip</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>22</index><block>1</block><killingTests/><suspValue>0.23904572186687872</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.23904572186687872</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>78ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.utils.IOUtils</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(Ljava/io/InputStream;J)J</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</killingTests><suspValue>0.22941573387056174</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/compress/utils/IOUtils::skip</description><testsExecutionTime><test><name>org.apache.commons.compress.utils.IOUtilsTest.skipUsingRead(org.apache.commons.compress.utils.IOUtilsTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
</mutations>
