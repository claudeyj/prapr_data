<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/File;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>5ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/File;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>5</index><block>1</block><killingTests/><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/File;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/File;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/File;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/File;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>57</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setGeneralPurposeBit(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setCentralDirectoryExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to method with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to size with an access to externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to internalAttributes with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to platform with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to externalAttributes with an access to size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to method with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to internalAttributes with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>replaced access to platform with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>access to field name is replaced by access to local name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>56</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>29</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::setName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>40</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable unparseableExtra</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable rawName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>57</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable gpb</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>MethodNameMutator_0</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the call to factory method java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>MethodNameMutator_1</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the call to factory method java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.BigFilesIT using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>MethodNameMutator_2</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the call to factory method java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>MethodNameMutator_3</mutator><index>11</index><block>20</block><killingTests/><suspValue>0.15075567228888181</suspValue><description>the call to factory method java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.memory.MemoryArchiveEntry using (Ljava/lang/String;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>409</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to extraFields is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>9</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to extraFields is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>409</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to extraFields is guarded using field extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>9</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to extraFields is guarded using field extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the call to java.util.LinkedHashMap::get(Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>409</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to extraFields is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>9</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to extraFields is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced call to java/util/LinkedHashMap::get with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>409</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>removed call to java/util/LinkedHashMap::get</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>13</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getExtraField</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>409</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>409</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getExtraField to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to &#60;init&#62;(Ljava/util/Collection;)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to extraFields is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>32</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to extraFields is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>41</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to unparseableExtra is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to extraFields is guarded using field extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>32</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to extraFields is guarded using field extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>41</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to unparseableExtra is guarded using field unparseableExtra</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>41</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getUnparseableExtraFieldData()Lorg/apache/commons/compress/archivers/zip/UnparseableExtraFieldData;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>33</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to java.util.LinkedHashMap::values()Ljava/util/Collection; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to java.util.List::toArray([Ljava/lang/Object;)[Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>the access to extraFields is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>32</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to extraFields is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>41</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the access to unparseableExtra is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>33</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to values()Ljava/util/Collection; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to java/util/List::toArray with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>34</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed call to java/util/ArrayList::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>53</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>33</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed call to java/util/LinkedHashMap::values</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>55</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed call to java/util/List::toArray</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>57</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>39</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>42</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>39</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>42</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getExtraFields</mutatedMethod><methodDescription>(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>57</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getExtraFields to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>MethodNameMutator_0</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the call to factory method java.util.zip.ZipEntry.getName()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>MethodNameMutator_4</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the call to factory method java.util.zip.ZipEntry.getName()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded using field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded using field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getName()Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>11</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getName()Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>replaced call to getName with a call to getComment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>replaced call to getName with a call to toString</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the call to java.util.zip.ZipEntry::getName()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded returning field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>11</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the access to name is guarded returning field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>removed call to java/util/zip/ZipEntry::getName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getName</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><block>28</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12964074471043288</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getName to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the access to extraFields is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the access to extraFields is guarded using field extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the access to extraFields is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the access to extraFields is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the access to extraFields is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>35</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>mergeExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V</methodDescription><lineNumber>611</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><block>36</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::setExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to getExtraFields()[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>replaced call to mergeLocalFileDataData with a call to mergeCentralDirectoryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to setExtra([B)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to setExtra([B)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to setExtra([B)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to setExtra([B)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to getExtraFields(Z)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to setExtra([B)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>the call to java.util.zip.ZipEntry::setExtra([B)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ExtraFieldUtils::mergeLocalFileDataData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14744195615489714</suspValue><description>removed call to java/util/zip/ZipEntry::setExtra</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([BZ)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([B)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([B)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([B)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([BZ)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([BZ)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([B)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([B)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([BZ)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([BZ)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([BZ)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced call to parse([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField; with a call to parse([B)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>445</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>17</index><block>23</block><killingTests/><suspValue>0.18569533817705186</suspValue><description>catch type java/util/zip/ZipException is replaced with java/io/IOException</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced access to READ with an access to THROW</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>5</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>replaced access to READ with an access to SKIP</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>access to local extra is replaced by access to field rawName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the call to mergeExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the call to mergeExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the call to mergeExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the call to mergeExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the call to mergeExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::mergeExtraFields([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;Z)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>437</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ExtraFieldUtils::parse</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtra</mutatedMethod><methodDescription>([B)V</methodDescription><lineNumber>440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18569533817705186</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::mergeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>MethodNameMutator_0</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using (I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>MethodNameMutator_0</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to factory method java.util.LinkedHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>MethodNameMutator_1</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to factory method java.util.LinkedHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.BigFilesIT using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>MethodNameMutator_2</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to factory method java.util.LinkedHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>MethodNameMutator_3</mutator><index>44</index><block>9</block><killingTests/><suspValue>0.23249527748763857</suspValue><description>the call to factory method java.util.LinkedHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.memory.MemoryArchiveEntry using (Ljava/lang/String;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>MethodNameMutator_4</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IFZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra()V with a call to setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IF)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IF)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IF)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IF)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IFZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra()V with a call to setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IF)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IF)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Map;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IFZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra()V with a call to setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IFZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra()V with a call to setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IFZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra()V with a call to setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(IFZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra()V with a call to setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the access to extraFields is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the access to extraFields is guarded using field extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local i is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>42</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local i is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>42</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local i is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>42</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local i is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>42</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>access to local i is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>42</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>access to local i is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>replaced call to getHeaderId with a call to getLocalFileDataLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced call to setExtra with a call to removeUnparseableExtraFieldData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>replaced call to getHeaderId with a call to getCentralDirectoryLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipExtraField::getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to java.util.LinkedHashMap::put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the access to extraFields is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the access to extraFields is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the access to extraFields is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to setExtra()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to setExtra()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to setExtra()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to setExtra()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>the call to put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to setExtra()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExtra()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>replaced call to java/util/LinkedHashMap::put with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>6</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to java/util/LinkedHashMap::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>40</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipExtraField::getHeaderId</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>44</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>removed call to java/util/LinkedHashMap::put</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.23249527748763857</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::setExtra</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setExtraFields</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>Removed assignment to member variable extraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setGeneralPurposeBit</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</methodDescription><lineNumber>597</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>34</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setGeneralPurposeBit(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setGeneralPurposeBit</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</methodDescription><lineNumber>597</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>34</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to field gpb is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setGeneralPurposeBit</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</methodDescription><lineNumber>597</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>34</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local b is replaced by access to field gpb</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setGeneralPurposeBit</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</methodDescription><lineNumber>597</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>34</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Removed assignment to member variable gpb</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>replaced access to method with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>replaced access to method with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to field method is replaced by access to local method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local method is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>23ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>Removed assignment to member variable method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>512</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>29</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>512</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>29</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>access to field name is replaced by access to local name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>512</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>29</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>104ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>512</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>4</index><block>29</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>512</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>29</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1270001270001905</suspValue><description>Removed assignment to member variable name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>67ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>10</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setCentralDirectoryExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>10</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to field rawName is replaced by access to local rawName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>9</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local rawName is replaced by access to field rawName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>4</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>548</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::setName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;[B)V</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>33</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Removed assignment to member variable rawName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced access to platform with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced access to platform with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to field platform is replaced by access to local platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local platform is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local platform is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local platform is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local platform is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>access to local platform is replaced by access to field method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setPlatform</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Removed assignment to member variable platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>replaced access to size with an access to externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>access to field size is replaced by access to local size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>access to local size is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>access to local size is replaced by access to field size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>access to local size is replaced by access to field externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>access to local size is replaced by access to field externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>6</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>6</index><block>30</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setSize</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>18</index><block>32</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1318760946791574</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>MethodNameMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>MethodNameMutator_0</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the call to factory method java.lang.Class.newInstance()Ljava/lang/Object; is replaced by an instantiation of type java.lang.Object using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>MethodNameMutator_1</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.BigFilesIT using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>MethodNameMutator_1</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the call to factory method java.lang.Class.newInstance()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.BigFilesIT using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>MethodNameMutator_2</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>MethodNameMutator_2</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the call to factory method java.lang.Class.newInstance()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.tar.TarArchiveInputStreamTest using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>MethodNameMutator_3</mutator><index>5</index><block>0</block><killingTests/><suspValue>0.2182178902359924</suspValue><description>the call to factory method java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.memory.MemoryArchiveEntry using (Ljava/lang/String;)V</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>MethodNameMutator_3</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the call to factory method java.lang.Class.newInstance()Ljava/lang/Object; is replaced by an instantiation of type org.apache.commons.compress.archivers.memory.MemoryArchiveEntry using (Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to get with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to java.util.Map::get(Ljava/lang/Object;)Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the call to java.lang.Class::newInstance()Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to get(Ljava/lang/Object;)Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>the call to newInstance()Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to java/util/Map::get with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed call to java/util/Map::get</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>removed call to java/lang/Class::newInstance</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>128ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ExtraFieldUtils::createExtraField</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>createExtraField</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.24253562503633297</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ExtraFieldUtils::createExtraField to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>MethodNameMutator_0</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using (I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>MethodNameMutator_0</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using (I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>MethodNameMutator_0</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using (I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>MethodNameMutator_4</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>MethodNameMutator_4</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>MethodNameMutator_4</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>45</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local i is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>51</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local sum is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>53</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>58</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local sum is replaced by local regularExtraFieldCount to be defined</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>204</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>65</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local sum is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>77</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local i is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>78</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local regularExtraFieldCount is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>83</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>89</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>95</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>101</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>115</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local local is replaced by local result to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>117</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local result is replaced by local local to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>118</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>121</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local local is replaced by local result to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>126</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local regularExtraFieldCount to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>127</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local local is replaced by local result to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>132</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local regularExtraFieldCount to be defined</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>45</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local i is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>51</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local sum is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>53</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>58</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local sum is replaced by local i to be defined</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>77</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local i is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>78</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local regularExtraFieldCount is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>83</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>89</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>95</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>101</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>109</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>118</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>126</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local sum to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>132</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local sum to be defined</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>77</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local i is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>78</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>local regularExtraFieldCount is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>83</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>89</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>95</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>101</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>109</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local i is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>118</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>126</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local i to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_2</mutator><index>132</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>local start is replaced by local i to be defined</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>199</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>37</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>access to local regularExtraFieldCount is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>45</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>access to local i is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>51</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local sum is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>53</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local i is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>204</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>65</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>access to local sum is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>77</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>access to local i is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>78</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>access to local regularExtraFieldCount is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>83</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local i is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>89</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>95</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local i is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>101</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>109</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local i is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>118</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>126</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getLocalFileDataLength with a call to getHeaderId</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>56</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getValue with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getHeaderId with a call to getLocalFileDataLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getLocalFileDataLength with a call to getHeaderId</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>111</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getLocalFileDataData with a call to getCentralDirectoryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getLocalFileDataLength with a call to getCentralDirectoryLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getHeaderId with a call to getCentralDirectoryLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>replaced call to getLocalFileDataLength with a call to getCentralDirectoryLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>42ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipExtraField::getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>56</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipExtraField::getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>86</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipShort::getBytes()[B is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipExtraField::getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>98</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipShort::getBytes()[B is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>111</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipExtraField::getLocalFileDataData()[B is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>56</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getValue()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>86</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getBytes()[B is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>98</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getBytes()[B is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>111</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getLocalFileDataData()[B is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getHeaderId()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>86</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getBytes()[B is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getLocalFileDataLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>98</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getBytes()[B is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>111</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>the call to getLocalFileDataData()[B is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>48</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>79</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>61</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>135</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Changed increment from 1 to -1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>17</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>21</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>36</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>42</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>70</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>74</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>87</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>90</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>99</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>102</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>104</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>116</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>119</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>129</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>21</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Replaced integer multiplication with division</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>103</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>120</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>130</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>131</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>140</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>55</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipExtraField::getLocalFileDataLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>56</index><block>23</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>85</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipExtraField::getHeaderId</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>86</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getBytes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>97</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipExtraField::getLocalFileDataLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>98</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getBytes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>111</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipExtraField::getLocalFileDataData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>163</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ExtraFieldUtils::mergeLocalFileDataData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>13</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>140</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>13</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>140</index><block>26</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>5</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>48</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>79</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>5</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>48</index><block>22</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>79</index><block>24</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>163</index><block>27</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ExtraFieldUtils::mergeLocalFileDataData to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>91</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>105</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>123</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16329931618554522</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>mergeLocalFileDataData</mutatedMethod><methodDescription>([Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)[B</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.RemoveIncrementsMutator</mutator><index>135</index><block>25</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.14586499149789456</suspValue><description>Removed increment 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>168</lineNumber><mutator>MethodNameMutator_1</mutator><index>142</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.JarMarker using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>168</lineNumber><mutator>MethodNameMutator_3</mutator><index>142</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.AsiExtraField using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Collection;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>83ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>45ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>89ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Collection;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>76ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Collection;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Collection;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Collection;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(Ljava/util/Collection;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; with a call to toArray()[Ljava/lang/Object;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to &#60;init&#62;()V with a call to &#60;init&#62;(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to &#60;init&#62;([BI)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='NON_VIABLE' numberOfTestsRun='0'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>176</index><block>13</block><killingTests/><suspValue>0.2182178902359924</suspValue><description>catch type java/lang/InstantiationException is replaced with java/lang/ReflectiveOperationException</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>local start is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>43</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>local length is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>152</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>local start is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>155</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>local length is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>200</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>local start is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>201</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>local length is replaced by local start to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>205</index><block>15</block><killingTests/><suspValue>0.2182178902359924</suspValue><description>local start is replaced by local length to be defined</description><testsExecutionTime></testsExecutionTime><patchExecutionTime>0ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>32</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>40</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>43</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>access to local length is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>152</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>64ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>155</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>access to local length is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>200</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>access to local start is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>201</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>access to local length is replaced by access to field WORD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to getValue with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>156</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>replaced call to parseFromLocalFileData with a call to parseFromCentralDirectoryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>44ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>171</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to add with a call to contains</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>212</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to size with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>171</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to add with a call to remove</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>171</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>replaced call to add with a call to equals</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>171</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to java.util.List::add(Ljava/lang/Object;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>212</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>the call to java.util.List::size()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>the call to java.util.List::toArray([Ljava/lang/Object;)[Ljava/lang/Object; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to getValue()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>156</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>the call to parseFromLocalFileData([BII)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>171</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>the call to add(Ljava/lang/Object;)Z is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>184</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>212</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>the call to size()I is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>the call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>the call to toArray([Ljava/lang/Object;)[Ljava/lang/Object; is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>156</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipExtraField::parseFromLocalFileData([BII)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced call to java/util/List::toArray with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>removed call to java/util/ArrayList::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>35</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>33</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>41</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>153</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>202</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>101ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>154</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>203</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>204</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>147</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>142</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ExtraFieldUtils::createExtraField</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>171</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed call to java/util/List::add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>212</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>removed call to java/util/List::size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>219</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>removed call to java/util/List::toArray</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>221</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ExtraFieldUtils::parse</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>147</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>147</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>47</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.2182178902359924</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>221</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18107149208503706</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ExtraFieldUtils::parse to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtraFieldUtils.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ExtraFieldUtils</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BZLorg/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField;)[Lorg/apache/commons/compress/archivers/zip/ZipExtraField;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>156</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.22086305214969307</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipExtraField::parseFromLocalFileData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to nameCRC32 is guarded using value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>39ms</time></test></testsExecutionTime><patchExecutionTime>102ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to nameCRC32 is guarded using field nameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::setUnicodeName([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32 is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getNameCRC32()J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>37ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to nameCRC32 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to nameCRC32 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>22</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>29</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to nameCRC32 is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>40</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>46</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>44</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipLong::getBytes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>assembleData</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Removed assignment to member variable data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to field data is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to field data is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to field data is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>38</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>17</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>22</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>39</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getCentralDirectoryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getCentralDirectoryData to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to &#60;init&#62;(I)V with a call to &#60;init&#62;([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to data is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to assembleData()V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::assembleData()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>17</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getCentralDirectoryLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getCentralDirectoryLength to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getCentralDirectoryLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::assembleData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getCentralDirectoryData with a call to getUnicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getCentralDirectoryData with a call to getLocalFileDataData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to getCentralDirectoryData()[B is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to getCentralDirectoryData()[B is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to getCentralDirectoryData()[B is guarded returning field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getCentralDirectoryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getLocalFileDataData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataData</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getLocalFileDataData to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>MethodNameMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using (I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>MethodNameMutator_4</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.ZipShort using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getCentralDirectoryLength with a call to getLocalFileDataLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the call to getCentralDirectoryLength()Lorg/apache/commons/compress/archivers/zip/ZipShort; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getCentralDirectoryLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getLocalFileDataLength</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getLocalFileDataLength</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getLocalFileDataLength to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to nameCRC32 is guarded using value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to nameCRC32 is guarded using field nameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32 is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getNameCRC32()J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to nameCRC32 is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to nameCRC32 is guarded returning field nameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>replaced long return with 0 for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getNameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getNameCRC32</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getNameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to field unicodeName is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to field unicodeName is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to field unicodeName is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>22</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>111</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>29</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>access to local b is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>13</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>20</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>the access to unicodeName is guarded returning field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>30</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getUnicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getUnicodeName to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>getUnicodeName</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.42640143271122083</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getValue([BI)J with a call to getValue([B)J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getValue([BI)J with a call to getValue([B)J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getValue([BI)J with a call to getValue([B)J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getValue([BI)J with a call to getValue([B)J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getValue([BI)J with a call to getValue([B)J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced call to getValue([BI)J with a call to getValue([B)J</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_1</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using local buffer</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded using field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>48</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32 is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::setNameCRC32(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>56</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::setUnicodeName([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>74</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::setUnicodeName([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getCentralDirectoryData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName is replaced by the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getLocalFileDataData()[B</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>56</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to unicodeName with an access to data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>74</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>replaced access to data with an access to unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>56</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to field unicodeName is replaced by access to local buffer</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to field unicodeName is replaced by access to local buffer</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>177</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>74</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to field data is replaced by access to local buffer</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>163</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>3</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local length is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local offset is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local version is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>44</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local offset is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>52</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local length is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>60</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local offset is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>66</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local length is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>21</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local version is replaced by local length to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>44</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local offset is replaced by local version to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>52</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local length is replaced by local version to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>60</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local offset is replaced by local version to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_1</mutator><index>66</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>local length is replaced by local version to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local buffer is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>43</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local buffer is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>59</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local buffer is replaced by access to field unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>167</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>15</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local buffer is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>43</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local buffer is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>59</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>access to local buffer is replaced by access to field data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>64</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>the access to unicodeName is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>45</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>53</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>61</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>65</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>67</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>54</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>68</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>47</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipLong::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>removed call to java/lang/System::arraycopy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>48</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Removed assignment to member variable nameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>56</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Removed assignment to member variable unicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>44ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractUnicodeExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField</mutatedClass><mutatedMethod>parseFromLocalFileData</mutatedMethod><methodDescription>([BII)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>74</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3922322702763681</suspValue><description>Removed assignment to member variable data</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>MethodNameMutator_0</mutator><index>78</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to factory method java.util.Calendar.getTime()Ljava/util/Date; is replaced by an instantiation of type java.util.Date using (IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>MethodNameMutator_4</mutator><index>78</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to factory method java.util.Calendar.getTime()Ljava/util/Date; is replaced by an instantiation of type java.util.Date using (J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>27ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>35ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>40ms</time></test></testsExecutionTime><patchExecutionTime>158ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to getInstance()Ljava/util/Calendar; with a call to getInstance(Ljava/util/Locale;)Ljava/util/Calendar;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set(II)V with a call to set(IIIII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to add</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to roll</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to roll</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to roll</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to roll</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to roll</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced call to set with a call to roll</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>78</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::getTime()Ljava/util/Date; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>79</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Date::getTime()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>78</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to getTime()Ljava/util/Date; is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>79</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to getTime()J is guarded returning default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to set(II)V is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>78</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to getTime()Ljava/util/Date; is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>79</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to getTime()J is guarded returning local dosTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::set(II)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::set(II)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::set(II)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::set(II)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::set(II)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>the call to java.util.Calendar::set(II)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 25 with 26</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 127 with 128</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 1980 with 1981</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 21 with 22</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 15 with 16</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>28</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 16 with 17</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>39</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 31 with 32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 11 with 12</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 11 with 12</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 31 with 32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>56</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 12 with 13</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>58</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 5 with 6</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>61</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 63 with 64</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 13 with 14</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>69</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>72</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Substituted 62 with 63</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>26</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced integer subtraction with addition</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>37</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>48</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>51</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>59</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>70</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>73</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::getInstance</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>78</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::getTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>79</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Date::getTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>80</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced long return with 0 for org/apache/commons/compress/archivers/zip/ZipUtil::dosToJavaTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>80</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/compress/archivers/zip/ZipUtil::dosToJavaTime</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::set</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::set</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::set</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::set</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::set</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>dosToJavaTime</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>74</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1873171623163388</suspValue><description>removed call to java/util/Calendar::set</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>MethodNameMutator_0</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipEncoding.decode([B)Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>MethodNameMutator_4</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipEncoding.decode([B)Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update([BII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update([BII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update([BII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>59ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update([BII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update([BII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>48ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to update([B)V with a call to update([BII)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>36</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>catch type java/io/IOException is replaced with java/lang/Exception</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>access to local orig is replaced by access to field DOS_TIME_MIN</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getUnicodeName with a call to getCentralDirectoryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced call to getUnicodeName with a call to getLocalFileDataData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to java.util.zip.CRC32::getValue()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getNameCRC32()J is guarded using default value 0L</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField::getUnicodeName()[B is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipEncoding::decode([B)Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to update([B)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getValue()J is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getNameCRC32()J is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to getUnicodeName()[B is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to decode([B)Ljava/lang/String; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to java.util.zip.CRC32::update([B)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to java/util/zip/CRC32::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/compress/archivers/zip/ZipUtil::getUnicodeStringIfOriginalMatches</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>46</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/compress/archivers/zip/ZipUtil::getUnicodeStringIfOriginalMatches</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to java/util/zip/CRC32::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>25</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getNameCRC32</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField::getUnicodeName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>33</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipEncoding::decode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>27</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>27</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipUtil::getUnicodeStringIfOriginalMatches to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipUtil::getUnicodeStringIfOriginalMatches to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>getUnicodeStringIfOriginalMatches</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to java/util/zip/CRC32::update</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>MethodNameMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>126</lineNumber><mutator>MethodNameMutator_0</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>MethodNameMutator_1</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.JarMarker using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>MethodNameMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.AsiExtraField using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>MethodNameMutator_4</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>126</lineNumber><mutator>MethodNameMutator_4</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local originalNameBytes is replaced by local commentBytes to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>21</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local newName is replaced by local originalName to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local originalName is replaced by local newName to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local newName is replaced by local originalName to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>30</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>local newName is replaced by local originalName to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local commentBytes is replaced by local originalNameBytes to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>local commentBytes is replaced by local originalNameBytes to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>126</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local originalNameBytes is replaced by access to field DOS_TIME_MIN</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local commentBytes is replaced by access to field DOS_TIME_MIN</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>access to local commentBytes is replaced by access to field DOS_TIME_MIN</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getName()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to java.lang.String::equals(Ljava/lang/Object;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to equals(Ljava/lang/Object;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to equals(Ljava/lang/Object;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to equals(Ljava/lang/Object;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to equals(Ljava/lang/Object;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getExtraField(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to getName()Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>the call to equals(Ljava/lang/Object;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getExtraField</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>6ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipUtil::getUnicodeStringIfOriginalMatches</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed call to java/lang/String::equals</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>35</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.31622776601683794</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>setNameAndCommentFromExtraFields</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.5773502691896258</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::setName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to languageEncodingFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to dataDescriptorFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to encryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to strongEncryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to languageEncodingFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to dataDescriptorFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to encryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to strongEncryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to languageEncodingFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to dataDescriptorFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to encryptionFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>replaced access to strongEncryptionFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Removed assignment to member variable languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Removed assignment to member variable dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Removed assignment to member variable encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.12403473458920847</suspValue><description>Removed assignment to member variable strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>local generalPurposeFlag is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>local generalPurposeFlag is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>42</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>local generalPurposeFlag is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>local generalPurposeFlag is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local offset is replaced by access to field ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>42</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local offset is replaced by access to field DATA_DESCRIPTOR_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field DATA_DESCRIPTOR_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field DATA_DESCRIPTOR_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>42</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field DATA_DESCRIPTOR_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field DATA_DESCRIPTOR_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local offset is replaced by access to field STRONG_ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field STRONG_ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field STRONG_ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>42</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field STRONG_ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field STRONG_ENCRYPTION_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local offset is replaced by access to field UFT8_NAMES_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>16</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field UFT8_NAMES_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>29</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field UFT8_NAMES_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>42</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field UFT8_NAMES_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local generalPurposeFlag is replaced by access to field UFT8_NAMES_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useDataDescriptor with a call to useUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useUTF8ForNames with a call to useDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useStrongEncryption with a call to useUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useEncryption with a call to useUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useDataDescriptor with a call to useEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useUTF8ForNames with a call to useEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useStrongEncryption with a call to useDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useEncryption with a call to useDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useDataDescriptor with a call to useStrongEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useUTF8ForNames with a call to useStrongEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useStrongEncryption with a call to useEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to useEncryption with a call to useStrongEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useDataDescriptor(Z)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useUTF8ForNames(Z)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useStrongEncryption(Z)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useEncryption(Z)V is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useDataDescriptor(Z)V is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useUTF8ForNames(Z)V is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useStrongEncryption(Z)V is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to useEncryption(Z)V is guarded returning local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced call to org/apache/commons/compress/archivers/zip/ZipShort::getValue with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>11</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>17</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 2048 with 2049</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>33</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>36</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>43</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 64 with 65</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>46</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>49</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>56</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>59</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>62</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>41ms</time></test></testsExecutionTime><patchExecutionTime>49ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>68</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::parse</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>45</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>58</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>32</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>45</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>58</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>68</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::parse to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::useDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::useUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::useStrongEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::useEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>replaced access to dataDescriptorFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>replaced access to dataDescriptorFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>replaced access to dataDescriptorFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>access to field dataDescriptorFlag is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>access to local b is replaced by access to field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>access to local b is replaced by access to field dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>access to local b is replaced by access to field encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>access to local b is replaced by access to field strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useDataDescriptor</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15713484026367722</suspValue><description>Removed assignment to member variable dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to encryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to encryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to encryptionFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to field encryptionFlag is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Removed assignment to member variable encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>44ms</time></test></testsExecutionTime><patchExecutionTime>112ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to strongEncryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to strongEncryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>replaced access to strongEncryptionFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to field strongEncryptionFlag is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>8</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>access to local b is replaced by access to field strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>9</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useStrongEncryption</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1796053020267749</suspValue><description>Removed assignment to member variable strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>replaced access to languageEncodingFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>replaced access to languageEncodingFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>replaced access to languageEncodingFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to field languageEncodingFlag is replaced by access to local b</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local b is replaced by access to field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local b is replaced by access to field dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local b is replaced by access to field encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>access to local b is replaced by access to field strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>useUTF8ForNames</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13074409009212268</suspValue><description>Removed assignment to member variable languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to languageEncodingFlag is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to languageEncodingFlag is guarded using field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesUTF8ForNames()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesDataDescriptor()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesEncryption()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesStrongEncryption()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced access to languageEncodingFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced access to languageEncodingFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced access to languageEncodingFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to languageEncodingFlag is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>the access to languageEncodingFlag is guarded returning field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesUTF8ForNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.18257418583505536</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local name is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local name is replaced by access to field UTF_DASH_8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipEncodingHelper::isUTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::getZipEncoding</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13303802104754786</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::getZipEncoding to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>242</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local encoding is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local encoding is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local encoding is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>242</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local encoding is replaced by access to field UTF_DASH_8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local encoding is replaced by access to field UTF_DASH_8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>access to local encoding is replaced by access to field UTF_DASH_8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced call to equalsIgnoreCase with a call to startsWith</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced call to equalsIgnoreCase with a call to startsWith</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced call to equalsIgnoreCase with a call to endsWith</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced call to equalsIgnoreCase with a call to endsWith</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced call to equalsIgnoreCase with a call to matches</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced call to equalsIgnoreCase with a call to matches</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>the call to java.lang.String::equalsIgnoreCase(Ljava/lang/String;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>the call to java.lang.String::equalsIgnoreCase(Ljava/lang/String;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>the call to equalsIgnoreCase(Ljava/lang/String;)Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>the call to equalsIgnoreCase(Ljava/lang/String;)Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::isUTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::isUTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed call to java/lang/String::equalsIgnoreCase</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed call to java/lang/String::equalsIgnoreCase</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>103ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.128564869306645</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>38</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16783627165933782</suspValue><description>access to field value is replaced by access to local value</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16783627165933782</suspValue><description>Removed assignment to member variable value</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to getValue([BI)I with a call to getValue([B)I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>access to field value is replaced by access to local offset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ArgumentPropagationMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>replaced call to org/apache/commons/compress/archivers/zip/ZipShort::getValue with argument</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>([BI)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21320071635561041</suspValue><description>Removed assignment to member variable value</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the access to value is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the access to value is guarded using field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::hashCode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>replaced call to getValue with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>15</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the access to value is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>the call to getValue()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>25</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipShort::equals</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>25</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipShort::equals</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>7</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.21081851067789195</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded using field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded using field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::hashCode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::hashCode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>the access to value is guarded returning local result</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Substituted 255 with 256</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Substituted 65280 with 65281</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>31</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipShort::getBytes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>()[B</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.159111456835146</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipShort::getBytes to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to value is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to value is guarded using field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::hashCode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to value is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>the access to value is guarded returning field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced int return with 0 for org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.15075567228888181</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>local value is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>local offset is replaced by local value to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>local value is replaced by local offset to be defined</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>local value is replaced by local offset to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local offset is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local value is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local offset is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local value is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local offset is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local value is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local offset is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>98</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>access to local value is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Substituted 65280 with 65281</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Substituted 255 with 256</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>replaced int return with 0 for org/apache/commons/compress/archivers/zip/ZipShort::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)I</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.17025130615174972</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>the access to value is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>the access to value is guarded using field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::getValue()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipShort.value is replaced by the call to org.apache.commons.compress.archivers.zip.ZipShort::hashCode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>the access to value is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>the access to value is guarded returning field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>replaced int return with 0 for org/apache/commons/compress/archivers/zip/ZipShort::hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipShort.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipShort</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.16222142113076254</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>113</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>114</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>32</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>44</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 255 with 256</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>21</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 65280 with 65281</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>31</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>33</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 16711680 with 16711681</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>55ms</time></test></testsExecutionTime><patchExecutionTime>64ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 16 with 17</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>43</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 3 with 4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 4278190080 with 4278190081</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Substituted 24 with 25</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>48</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>Replaced Shift Right with Shift Left</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>55</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipLong::getBytes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getBytes</mutatedMethod><methodDescription>(J)[B</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13608276348795434</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipLong::getBytes to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>31</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>46</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>48</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>131</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>57</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local value is replaced by access to field BYTE_3_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>48</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>48</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_1_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>48</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>33</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>48</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>access to local offset is replaced by access to field BYTE_2_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 3 with 4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 24 with 25</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 4278190080 with 4278190081</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>22</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 16 with 17</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 16711680 with 16711681</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>15ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>37</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>39</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 65280 with 65281</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>50</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 255 with 256</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>26ms</time></test></testsExecutionTime><patchExecutionTime>92ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced integer addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced Shift Left with Shift Right</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>51</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced bitwise AND with OR</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Replaced long addition with subtraction</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>58</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced long return with 0 for org/apache/commons/compress/archivers/zip/ZipLong::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipLong.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipLong</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>([BI)J</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>58</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced return of long value with value + 1 for org/apache/commons/compress/archivers/zip/ZipLong::getValue</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/StringBuilder;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/StringBuilder;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/StringBuilder;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/StringBuilder;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_16</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_17</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_18</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_19</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/StringBuilder;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;(Ljava/lang/StringBuilder;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_22</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>31ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_23</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([III)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced call to &#60;init&#62;([BLjava/lang/String;)V with a call to &#60;init&#62;([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded using field charset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded using field charset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded returning field charset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>7ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>19</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>the access to charset is guarded returning field charset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>20</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed call to java/lang/String::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>replaced return value with &#34;&#34; for org/apache/commons/compress/archivers/zip/FallbackZipEncoding::decode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>FallbackZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.FallbackZipEncoding</mutatedClass><mutatedMethod>decode</mutatedMethod><methodDescription>([B)Ljava/lang/String;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.19611613513818404</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/FallbackZipEncoding::decode to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnicodePathExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.UnicodePathExtraField</mutatedClass><mutatedMethod>getHeaderId</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/UnicodePathExtraField::getHeaderId</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>77ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>UnicodePathExtraField.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.UnicodePathExtraField</mutatedClass><mutatedMethod>getHeaderId</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/ZipShort;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/UnicodePathExtraField::getHeaderId to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
</mutations>
