<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to &#60;init&#62;(Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/util/zip/ZipEntry;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>43ms</time></test></testsExecutionTime><patchExecutionTime>56ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to setName(Ljava/lang/String;)V with a call to setName(Ljava/lang/String;[B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.alignment is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>29ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>57</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setGeneralPurposeBit(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.localHeaderOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.dataOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setExternalAttributes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>72</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isStreamContiguous is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setStreamContiguous(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>77</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.nameSource is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setNameSource(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>82</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.commentSource is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setCommentSource(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.alignment is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setCentralDirectoryExtra([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.localHeaderOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.dataOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setSize(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setLocalHeaderOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>51ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setLocalHeaderOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.alignment is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.localHeaderOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setLocalHeaderOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.dataOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setLocalHeaderOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setDataOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setDataOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.alignment is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.localHeaderOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setDataOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.dataOffset is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setDataOffset(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setAlignment(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setAlignment(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setAlignment(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.alignment is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setAlignment(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to method with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to size with an access to externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to internalAttributes with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to externalAttributes with an access to size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to alignment with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to localHeaderOffset with an access to size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to dataOffset with an access to size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>76</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to NAME with an access to NAME_WITH_EFS_FLAG</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>81</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to COMMENT with an access to UNICODE_EXTRA_FIELD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to method with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to size with an access to localHeaderOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to internalAttributes with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to externalAttributes with an access to localHeaderOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to alignment with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to localHeaderOffset with an access to externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to dataOffset with an access to externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>76</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to NAME with an access to UNICODE_EXTRA_FIELD</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to method with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to size with an access to dataOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to internalAttributes with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to externalAttributes with an access to dataOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to alignment with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to localHeaderOffset with an access to dataOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to dataOffset with an access to localHeaderOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to method with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to internalAttributes with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to alignment with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to method with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to internalAttributes with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to alignment with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to method with an access to alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to internalAttributes with an access to alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to alignment with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>access to field name is replaced by access to local name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to setName(Ljava/lang/String;)V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>56</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>29</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>34</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>61</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>66</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted -1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>71</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::setName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable size</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>20</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>30</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable externalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>35</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>40</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable unparseableExtra</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>45</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>50</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable rawName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>57</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable gpb</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>62</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable localHeaderOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>67</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable dataOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>72</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable isStreamContiguous</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>77</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable nameSource</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>82</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable commentSource</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>the access to gpb is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>the access to gpb is guarded using field gpb</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>the access to gpb is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>the access to gpb is guarded returning field gpb</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getGeneralPurposeBit</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getGeneralPurposeBit</mutatedMethod><methodDescription>()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;</methodDescription><lineNumber>815</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07905694150420949</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getGeneralPurposeBit to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to method is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to method is guarded using field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getInternalAttributes()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getUnixMode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getPlatform()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getAlignment()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced access to method with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced access to method with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced access to method with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced access to method with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced access to method with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced access to method with an access to alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to method is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>the access to method is guarded returning field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced int return with 0 for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getMethod</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07738232325341368</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to platform is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to platform is guarded using field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getInternalAttributes()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getUnixMode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getPlatform()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getAlignment()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced access to platform with an access to alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to platform is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to platform is guarded returning field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced int return with 0 for org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>getPlatform</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setMethod(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setInternalAttributes(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setUnixMode(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>38ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setPlatform(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_4</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setAlignment(I)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>replaced access to method with an access to internalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>replaced access to method with an access to versionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>replaced access to method with an access to versionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>replaced access to method with an access to platform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>replaced access to method with an access to rawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>replaced access to method with an access to alignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to field method is replaced by access to local method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field PLATFORM_UNIX</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field PLATFORM_FAT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field CRC_UNKNOWN</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field CRC_UNKNOWN</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field SHORT_MASK</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>access to local method is replaced by access to field SHORT_SHIFT</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>changed conditional boundary</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>removed conditional - replaced comparison check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_IF</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>removed conditional - replaced comparison check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setMethod</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>Removed assignment to member variable method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>MethodNameMutator_0</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to factory method java.lang.String.replace(CC)Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>MethodNameMutator_4</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to factory method java.lang.String.replace(CC)Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to replace(CC)Ljava/lang/String; with a call to replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to replace(CC)Ljava/lang/String; with a call to replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to replace(CC)Ljava/lang/String; with a call to replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to replace(CC)Ljava/lang/String; with a call to replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to replace(CC)Ljava/lang/String; with a call to replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to replace(CC)Ljava/lang/String; with a call to replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>699</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::setName(Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>699</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>24</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>access to field name is replaced by access to local name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>18</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>699</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>23</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>access to local name is replaced by access to field name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>3</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>94ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>699</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToMethodCallMutator_0</mutator><index>23</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the access to the local name is replaced a call name.toLowerCase()</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to contains with a call to contentEquals</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getAlignment</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_7</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>replaced call to getPlatform with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getPlatform()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to java.lang.String::contains(Ljava/lang/CharSequence;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>59ms</time></test></testsExecutionTime><patchExecutionTime>73ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to java.lang.String::replace(CC)Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to getPlatform()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to contains(Ljava/lang/CharSequence;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to replace(CC)Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to getPlatform()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to contains(Ljava/lang/CharSequence;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to replace(CC)Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to getPlatform()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to contains(Ljava/lang/CharSequence;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to replace(CC)Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to getPlatform()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to contains(Ljava/lang/CharSequence;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to replace(CC)Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to getPlatform()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>the call to contains(Ljava/lang/CharSequence;)Z is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>the call to replace(CC)Ljava/lang/String; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>Substituted 92 with 93</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>Substituted 47 with 48</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>6</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed call to java/lang/String::contains</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>removed call to java/lang/String::replace</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>7</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>11</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>699</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07179581586177382</suspValue><description>Removed assignment to member variable name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveEntry.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</mutatedClass><mutatedMethod>setName</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>697</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.NakedReceiverMutator</mutator><index>17</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07254762501100116</suspValue><description>replaced call to java/lang/String::replace with receiver</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>43ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_1</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_10</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_11</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_12</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_13</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_14</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_15</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_20</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_21</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_4</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_5</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_9</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;Ljava/lang/String;ZZ)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;Z)V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Z)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_0</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;I)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Z)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_2</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;I)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Z)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_3</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;I)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Z)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_6</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;I)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Z)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_7</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;I)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Z)V with a call to &#60;init&#62;()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ArgumentsListMutator_8</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to &#60;init&#62;(Ljava/io/InputStream;I)V with a call to &#60;init&#62;(Ljava/io/InputStream;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>102</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>114</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>49</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFirstLocalFileHeader([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFirstLocalFileHeader([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFirstLocalFileHeader([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>67</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFirstLocalFileHeader([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFirstLocalFileHeader([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>156</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>49</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFully([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>157</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFully([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>158</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFully([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>159</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>67</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFully([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>160</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::readFully([B)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to closed with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to hitCentralDirectory with an access to closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>94</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to useUnicodeExtraFields with an access to closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>214</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>110</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to closed with an access to allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to hitCentralDirectory with an access to allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>94</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to useUnicodeExtraFields with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>214</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>110</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>94</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced access to useUnicodeExtraFields with an access to allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field closed is replaced by access to local useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field hitCentralDirectory is replaced by access to local useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field allowStoredEntriesWithDataDescriptor is replaced by access to local useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>210</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field encoding is replaced by access to local encoding</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>94</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field useUnicodeExtraFields is replaced by access to local useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>105</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field in is replaced by access to local inputStream</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>214</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>110</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field allowStoredEntriesWithDataDescriptor is replaced by access to local useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field closed is replaced by access to local allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field hitCentralDirectory is replaced by access to local allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>115</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field allowStoredEntriesWithDataDescriptor is replaced by access to local allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>94</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field useUnicodeExtraFields is replaced by access to local allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>214</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_1</mutator><index>110</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>access to field allowStoredEntriesWithDataDescriptor is replaced by access to local allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>93</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local useUnicodeExtraFields is replaced by local allowStoredEntriesWithDataDescriptor to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>33ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>214</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalNameMutator_0</mutator><index>109</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>local allowStoredEntriesWithDataDescriptor is replaced by local useUnicodeExtraFields to be used</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>96</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>17</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to allocate with a call to allocateDirect</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to capacity with a call to arrayOffset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to capacity with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>387ms</time></test></testsExecutionTime><patchExecutionTime>401ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>replaced call to capacity with a call to getInt</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to java.nio.ByteBuffer::capacity()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to java.nio.ByteBuffer::limit(I)Ljava/nio/Buffer; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>102</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>114</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>102</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>114</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>102</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>114</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the access to buf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to capacity()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to limit(I)Ljava/nio/Buffer; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to capacity()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to limit(I)Ljava/nio/Buffer; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to capacity()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to limit(I)Ljava/nio/Buffer; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to capacity()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to limit(I)Ljava/nio/Buffer; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to capacity()I is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>the call to limit(I)Ljava/nio/Buffer; is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>11</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to java/util/zip/Inflater::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>104</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to java/io/PushbackInputStream::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 512 with 513</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>27</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>42</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>47</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 30 with 31</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>53</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 1024 with 1025</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>59</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 2 with 3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>65</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 4 with 5</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>71</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 16 with 17</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>77</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>34ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>115</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to java/nio/ByteBuffer::allocate</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>88</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipEncodingHelper::getZipEncoding</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>103</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to java/nio/ByteBuffer::capacity</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>116</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>removed call to java/nio/ByteBuffer::limit</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>12</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable inf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable buf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>23</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable current</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>28</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>38</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable lastStoredEntry</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>43</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>49</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable lfhBuf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>55</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable skipBuf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>61</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable shortBuf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>67</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable wordBuf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>73</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable twoDwordBuf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>78</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable entriesRead</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>83</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable encoding</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>89</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable zipEncoding</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>94</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>105</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable in</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>110</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1259881576697424</suspValue><description>Removed assignment to member variable allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>the call to supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>27</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipArchiveInputStream::canReadEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>27</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipArchiveInputStream::canReadEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>24</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipUtil::canHandleEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveInputStream::supportsDataDescriptorFor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>canReadEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.3779644730092272</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to closed is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to in is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to inf is guarded using value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to closed is guarded using field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to in is guarded using field in</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to inf is guarded using field inf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::currentEntryHasOutstandingBytes()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to closed with an access to useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>550</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to closed with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to closed with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>550</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to closed with an access to allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced access to closed with an access to allowStoredEntriesWithDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>access to field in is replaced by access to local this</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to close with a call to reset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>replaced call to end with a call to reset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to closed is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to in is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to inf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to closed is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to in is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_1</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to inf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to closed is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>14</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to in is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>19</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the access to inf is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to close()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to end()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to close()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_1</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to end()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to close()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_2</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to end()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to close()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to end()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>67ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to close()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to end()V is guarded returning enclosing method</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to java.io.InputStream::close()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.VoidMethodCallGuardMutator</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>the call to java.util.zip.Inflater::end()V is guarded</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed call to java/io/InputStream::close</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>554</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>removed call to java/util/zip/Inflater::end</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13245323570650439</suspValue><description>Removed assignment to member variable closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>MethodNameMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.GeneralPurposeBit using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to allowStoredEntriesWithDataDescriptor is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to allowStoredEntriesWithDataDescriptor is guarded using field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor is replaced by the call to org.apache.commons.compress.archivers.zip.ZipArchiveInputStream::currentEntryHasOutstandingBytes()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to STORED</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to UNSHRINKING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to allowStoredEntriesWithDataDescriptor with an access to hitCentralDirectory</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>21</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to usesDataDescriptor with a call to usesUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to usesDataDescriptor with a call to usesEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to usesDataDescriptor with a call to usesStrongEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>44ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesDataDescriptor()Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>32ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipMethod::getCode()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to allowStoredEntriesWithDataDescriptor is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>8</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the access to allowStoredEntriesWithDataDescriptor is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to usesDataDescriptor()Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getCode()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to usesDataDescriptor()Z is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getCode()I is guarded returning field useUnicodeExtraFields</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to usesDataDescriptor()Z is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getMethod()I is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_4</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>the call to getCode()I is guarded returning field closed</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>41ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>33</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipArchiveInputStream::supportsDataDescriptorFor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>47ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>33</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipArchiveInputStream::supportsDataDescriptorFor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>17</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>26</index><block>19</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>30</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getGeneralPurposeBit</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>11</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>16</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>20</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>22</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipMethod::getCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>9</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>12</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>23</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>44ms</time></test></testsExecutionTime><patchExecutionTime>78ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>9</index><block>15</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>12</index><block>16</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>18</index><block>17</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>23</index><block>18</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipArchiveInputStream</mutatedClass><mutatedMethod>supportsDataDescriptorFor</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><block>20</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1543033499620919</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced call to supportsEncryptionOf with a call to canHandleEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced call to supportsMethodOf with a call to canHandleEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>48ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced call to supportsEncryptionOf with a call to supportsMethodOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced call to supportsMethodOf with a call to supportsEncryptionOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipUtil::canHandleEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipUtil::canHandleEntryData</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>9</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipUtil::supportsEncryptionOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipUtil::supportsMethodOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>canHandleEntryData</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.1643989873053573</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>MethodNameMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>the call to factory method org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is replaced by an instantiation of type org.apache.commons.compress.archivers.zip.GeneralPurposeBit using ()V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>replaced call to usesEncryption with a call to usesUTF8ForNames</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>replaced call to usesEncryption with a call to usesDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>replaced call to usesEncryption with a call to usesStrongEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesEncryption()Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>the call to getGeneralPurposeBit()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit; is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>the call to usesEncryption()Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>14</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipUtil::supportsEncryptionOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>14</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipUtil::supportsEncryptionOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>7</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>11</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getGeneralPurposeBit</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>5</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>6</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsEncryptionOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>6</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07930515857181442</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to UNSHRINKING with an access to STORED</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to IMPLODING with an access to STORED</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>22</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to STORED</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>27</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to BZIP2 with an access to STORED</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>455ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to UNSHRINKING with an access to EXPANDING_LEVEL_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to IMPLODING with an access to UNSHRINKING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>22</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to UNSHRINKING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>27</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to BZIP2 with an access to UNSHRINKING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>33ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>46ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test></testsExecutionTime><patchExecutionTime>576ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to UNSHRINKING with an access to EXPANDING_LEVEL_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to IMPLODING with an access to EXPANDING_LEVEL_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>22</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>28ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>27</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to BZIP2 with an access to EXPANDING_LEVEL_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>34ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>475ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to UNSHRINKING with an access to EXPANDING_LEVEL_3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to IMPLODING with an access to EXPANDING_LEVEL_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>22</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>27</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to BZIP2 with an access to EXPANDING_LEVEL_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>64ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>577ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to UNSHRINKING with an access to EXPANDING_LEVEL_4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to IMPLODING with an access to EXPANDING_LEVEL_3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>22</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>27</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to BZIP2 with an access to EXPANDING_LEVEL_3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>55ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>21ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>550ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>8</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to UNSHRINKING with an access to IMPLODING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>13</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to IMPLODING with an access to EXPANDING_LEVEL_4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>22</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to ENHANCED_DEFLATED with an access to EXPANDING_LEVEL_4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_5</mutator><index>27</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced access to BZIP2 with an access to EXPANDING_LEVEL_4</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>67ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>0ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>21ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>0ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>500ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>137ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getInternalAttributes</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>23ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>0ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>411ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>57ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getUnixMode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>509ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>25ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>30ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>61ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getPlatform</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>54ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>64ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test></testsExecutionTime><patchExecutionTime>584ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>36ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_3</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to hashCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>61ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>588ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_4</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionRequired</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>42ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>44ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>630ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>38ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_5</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getVersionMadeBy</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>74ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>30ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test></testsExecutionTime><patchExecutionTime>630ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_6</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced call to getMethod with a call to getRawFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>0ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>65ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>574ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipMethod::getCode()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipMethod::getCode()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>33ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>23</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipMethod::getCode()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipArchiveEntry::getMethod()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to org.apache.commons.compress.archivers.zip.ZipMethod::getCode()I is guarded using default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getCode()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getCode()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>23</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getCode()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getMethod()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>the call to getCode()I is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>39</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipUtil::supportsMethodOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>39</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/ZipUtil::supportsMethodOf</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>Substituted 8 with 9</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>32</index><block>13</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>36</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>40ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>55ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>4</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>7</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>9</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipMethod::getCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>12</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipMethod::getCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>23ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>17</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>21</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>23</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipMethod::getCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='88'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipArchiveEntry::getMethod</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>41ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>41ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>21ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testUnixModeInAddRaw(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>26ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>27ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>35ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testReadZip(org.apache.commons.compress.IOMethodsTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>25ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>40ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>31ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>23ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>26ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterSampleTest.testSample(org.apache.commons.compress.archivers.zip.ScatterSampleTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>24ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>14ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnzipBZip2CompressedEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitDirectoryEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>34ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>30ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>29ms</time></test><test><name>org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest.testWriteReadRoundtrip(org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestampTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>1197ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>28</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipMethod::getCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>29ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>39ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>0ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>14ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>8ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>17ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>19ms</time></test></testsExecutionTime><patchExecutionTime>565ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>24</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='82'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>29</index><block>12</block><killingTests>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalizeInPlace(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>16ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testMessageWithCorruptFileName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>28ms</time></test><test><name>org.apache.commons.compress.compressors.pack200.Pack200UtilsTest.testNormalize(org.apache.commons.compress.compressors.pack200.Pack200UtilsTest)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest.testRead7ZipMultiVolumeArchiveForStream(org.apache.commons.compress.archivers.zip.Maven221MultiVolumeTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testWithBytesAfterData(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>15ms</time></test><test><name>org.apache.commons.compress.ArchiveReadTest.testArchive[file=SunOS.zip](org.apache.commons.compress.ArchiveReadTest)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testOptionalFinish(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnixSymlinkSampleFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>15ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>9ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>23ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDelayedOffsetsAndSizes(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldReadNestedZip(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadFile(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>11ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStream(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.doesntWriteDataDescriptorWhenAddingRawEntries(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testUnshrinking(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteZip(org.apache.commons.compress.IOMethodsTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>21ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipEntryWithUnsupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testDuplicateEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll(org.apache.commons.compress.archivers.JarTestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileTempFile(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>28ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRawNameReadFromStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testExplicitFileEntry(org.apache.commons.compress.archivers.ZipTestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.IOMethodsTest.testWriteJar(org.apache.commons.compress.IOMethodsTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>23ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToEFS(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceJar(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>24ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testFileEntryFromFile(org.apache.commons.compress.archivers.ZipTestCase)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>23ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.shouldConsumeArchiveCompletely(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive(org.apache.commons.compress.archivers.JarTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testTikaTestStream(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.winzipBackSlashWorkaround(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testCompressionMethod(org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest)</name><time>1ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testArchiveWithImplodeCompression4K2Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testOffsets(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.DataDescriptorTest.writesDataDescriptorForDeflatedEntryOnUnseekableOutput(org.apache.commons.compress.archivers.zip.DataDescriptorTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest.putArchiveEntry(org.apache.commons.compress.archivers.zip.ScatterZipOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ArchiveOutputStreamTest.testCallSequenceZip(org.apache.commons.compress.archivers.ArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.readDeflate64CompressedStreamWithDataDescriptor(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation(org.apache.commons.compress.archivers.JarTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfFirstStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>21ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properUseOfInflater(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.testUnshrinkEntry(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testListAllFilesWithNestedArchive(org.apache.commons.compress.archivers.ZipTestCase)</name><time>5ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryUnnownSizeToFileModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>12ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFileModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>13ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>23ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSupportedCompressionMethod(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker(org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testConcurrentReadSeekable(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>10ms</time></test><test><name>org.apache.commons.compress.compressors.Pack200TestCase.testJarUnarchiveAllFileArgInMemory(org.apache.commons.compress.compressors.Pack200TestCase)</name><time>7ms</time></test><test><name>org.apache.commons.compress.archivers.ZipTestCase.testSkipsPK00Prefix(org.apache.commons.compress.archivers.ZipTestCase)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStreamModeAlways(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>22ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallStoredEntryKnownSizeToFile(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>18ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ExplodeSupportTest.testZipStreamWithImplodeCompression8K3Trees(org.apache.commons.compress.archivers.zip.ExplodeSupportTest)</name><time>24ms</time></test><test><name>org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchiveForStream(org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest)</name><time>4ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipFileTest.testReadingOfStoredEntry(org.apache.commons.compress.archivers.zip.ZipFileTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceDefaultsToName(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.nameSourceIsSetToUnicodeExtraField(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryKnownSizeToStream(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>20ms</time></test><test><name>org.apache.commons.compress.archivers.zip.Zip64SupportIT.writeSmallDeflatedEntryUnknownSizeToStreamModeNever(org.apache.commons.compress.archivers.zip.Zip64SupportIT)</name><time>24ms</time></test></testsExecutionTime><patchExecutionTime>800ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>5</index><block>7</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>10</index><block>8</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>15</index><block>9</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>19</index><block>10</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>1ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>24</index><block>11</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>2ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>29</index><block>12</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipUtil.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipUtil</mutatedClass><mutatedMethod>supportsMethodOf</mutatedMethod><methodDescription>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><block>14</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07980868844676221</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>MethodNameMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>the call to factory method java.nio.charset.Charset.name()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>MethodNameMutator_4</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>the call to factory method java.nio.charset.Charset.name()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>29ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>60</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.CatchTypeWideningMutator_0</mutator><index>17</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.06415002990995841</suspValue><description>catch type java/nio/charset/UnsupportedCharsetException is replaced with java/lang/IllegalArgumentException</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>56</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>access to local name is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>58</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>11</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.06415002990995841</suspValue><description>access to local name is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>replaced call to name with a call to displayName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>replaced call to name with a call to toString</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>35ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>the call to java.nio.charset.Charset::name()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>the call to name()Ljava/lang/String; is guarded returning default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_3</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>the call to name()Ljava/lang/String; is guarded returning field UTF8_ZIP_ENCODING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConstructorCallMutator</mutator><index>34</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/NioZipEncoding::&#60;init&#62;</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>removed call to java/nio/charset/Charset::defaultCharset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.06415002990995841</suspValue><description>removed call to java/nio/charset/Charset::forName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>25</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>removed call to java/nio/charset/Charset::name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>26</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>removed call to org/apache/commons/compress/archivers/zip/ZipEncodingHelper::isUTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>35</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>replaced return value with null for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::getZipEncoding</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>getZipEncoding</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>mutated return of Object value for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::getZipEncoding to ( if (x != null) null else throw new RuntimeException )</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>22ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>MethodNameMutator_0</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>the call to factory method java.nio.charset.Charset.name()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BIILjava/lang/String;)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>MethodNameMutator_4</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>the call to factory method java.nio.charset.Charset.name()Ljava/lang/String; is replaced by an instantiation of type java.lang.String using ([BI)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced access to UTF_8 with an access to ISO_8859_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced access to UTF_8 with an access to US_ASCII</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced access to UTF_8 with an access to UTF_16</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_3</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced access to UTF_8 with an access to UTF_16BE</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_4</mutator><index>13</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced access to UTF_8 with an access to UTF_16LE</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>access to local charsetName is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>access to local charsetName is replaced by access to field UTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced call to name with a call to displayName</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>45ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_0</mutator><index>16</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced call to equalsIgnoreCase with a call to startsWith</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>50ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced call to name with a call to toString</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>46ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_1</mutator><index>16</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced call to equalsIgnoreCase with a call to endsWith</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>34ms</time></test></testsExecutionTime><patchExecutionTime>119ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.MethodNameMutator_2</mutator><index>16</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>replaced call to equalsIgnoreCase with a call to matches</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>40ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>the call to java.nio.charset.Charset::name()Ljava/lang/String; is guarded using default value null</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.NonVoidMethodCallGuardMutator_0</mutator><index>16</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>the call to java.lang.String::equalsIgnoreCase(Ljava/lang/String;)Z is guarded using default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>the call to name()Ljava/lang/String; is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningMethodCallGuardMutator_0</mutator><index>16</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>the call to equalsIgnoreCase(Ljava/lang/String;)Z is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.06063390625908324</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/ZipEncodingHelper::isUTF8</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>20</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.06063390625908324</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>negated conditional</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>14</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>removed call to java/nio/charset/Charset::name</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NonVoidMethodCallMutator</mutator><index>16</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>removed call to java/lang/String::equalsIgnoreCase</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>removed conditional - replaced equality check with false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>4</index><block>3</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>8ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_IF</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05590169943749474</suspValue><description>removed conditional - replaced equality check with true</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipEncodingHelper.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipEncodingHelper</mutatedClass><mutatedMethod>isUTF8</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.06063390625908324</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>17ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useUTF8ForNames(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useDataDescriptor(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::useStrongEncryption(Z)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to languageEncodingFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to dataDescriptorFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to encryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to strongEncryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to languageEncodingFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to dataDescriptorFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to encryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to strongEncryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to languageEncodingFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to dataDescriptorFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to encryptionFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>replaced access to strongEncryptionFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>18ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>13</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testClone(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test><test><name>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>31ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>18</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>23</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Removed assignment to member variable languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Removed assignment to member variable dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>19</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Removed assignment to member variable encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>24</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07053456158585983</suspValue><description>Removed assignment to member variable strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to dataDescriptorFlag is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>26ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to dataDescriptorFlag is guarded using field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesUTF8ForNames()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesDataDescriptor()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>9ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesEncryption()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesStrongEncryption()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced access to dataDescriptorFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced access to dataDescriptorFlag with an access to encryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>11ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced access to dataDescriptorFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to dataDescriptorFlag is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>the access to dataDescriptorFlag is guarded returning field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>10ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesDataDescriptor</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</name><time>2ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesDataDescriptor</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</killingTests><suspValue>0.13130643285972254</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest.testDefaults(org.apache.commons.compress.archivers.zip.GeneralPurposeBitTest)</name><time>3ms</time></test><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to encryptionFlag is guarded using value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to encryptionFlag is guarded using field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesUTF8ForNames()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>36ms</time></test></testsExecutionTime><patchExecutionTime>107ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesDataDescriptor()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesEncryption()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>12ms</time></test></testsExecutionTime><patchExecutionTime>27ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_3</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag is replaced by the call to org.apache.commons.compress.archivers.zip.GeneralPurposeBit::usesStrongEncryption()Z</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>replaced access to encryptionFlag with an access to languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_1</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>replaced access to encryptionFlag with an access to dataDescriptorFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldNameMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>replaced access to encryptionFlag with an access to strongEncryptionFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to encryptionFlag is guarded returning default value false</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>24ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>the access to encryptionFlag is guarded returning field languageEncodingFlag</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>replaced boolean return with false for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>4ms</time></test></testsExecutionTime><patchExecutionTime>13ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>replaced boolean return with true for org/apache/commons/compress/archivers/zip/GeneralPurposeBit::usesEncryption</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>12ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>GeneralPurposeBit.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.GeneralPurposeBit</mutatedClass><mutatedMethod>usesEncryption</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07832604499879574</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>3ms</time></test></testsExecutionTime><patchExecutionTime>9ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>the access to code is guarded using value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.DereferenceGuardMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>the access to code is guarded using field UNKNOWN_CODE</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>the access to field org.apache.commons.compress.archivers.zip.ZipMethod.code is replaced by the call to org.apache.commons.compress.archivers.zip.ZipMethod::getCode()I</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>10ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_0</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>access to local this is replaced by access to field STORED</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_1</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>access to local this is replaced by access to field UNSHRINKING</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>21ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_2</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>access to local this is replaced by access to field EXPANDING_LEVEL_1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_3</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>access to local this is replaced by access to field EXPANDING_LEVEL_2</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.LocalToFieldAccessMutator_4</mutator><index>3</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>access to local this is replaced by access to field EXPANDING_LEVEL_3</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_0</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>the access to code is guarded returning default value 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.ReturningDereferenceGuardMutator_2</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>the access to code is guarded returning field UNKNOWN_CODE</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>replaced int return with 0 for org/apache/commons/compress/archivers/zip/ZipMethod::getCode</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>20ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ZipMethod.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.ZipMethod</mutatedClass><mutatedMethod>getCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.09053574604251853</suspValue><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>37ms</time></test></testsExecutionTime><patchExecutionTime>99ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.ArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>46</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_0</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead is replaced by the call to org.apache.commons.compress.archivers.ArchiveInputStream::count(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.ArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>46</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldAccessToMethodCallMutator_1</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>the access to field org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead is replaced by the call to org.apache.commons.compress.archivers.ArchiveInputStream::pushedBackBytes(J)V</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>16ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.ArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>Substituted 1 with 0</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>15ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.ArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InlineConstantMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>Substituted 0 with 1</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>7ms</time></test></testsExecutionTime><patchExecutionTime>17ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.ArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>Removed assignment to member variable single</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>14ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ArchiveInputStream.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.ArchiveInputStream</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>15</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.07392212709545729</suspValue><description>Removed assignment to member variable bytesRead</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>33ms</time></test></testsExecutionTime><patchExecutionTime>90ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>NioZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.NioZipEncoding</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/nio/charset/Charset;Z)V</methodDescription><lineNumber>55</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>access to field charset is replaced by access to local charset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>34ms</time></test></testsExecutionTime><patchExecutionTime>97ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>NioZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.NioZipEncoding</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/nio/charset/Charset;Z)V</methodDescription><lineNumber>56</lineNumber><mutator>org.mudebug.prapr.core.mutationtest.engine.mutators.FieldToLocalAccessMutator_0</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>access to field useReplacement is replaced by access to local useReplacement</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>6ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>NioZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.NioZipEncoding</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/nio/charset/Charset;Z)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>9</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>Removed assignment to member variable charset</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>19ms</patchExecutionTime></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>NioZipEncoding.java</sourceFile><mutatedClass>org.apache.commons.compress.archivers.zip.NioZipEncoding</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/nio/charset/Charset;Z)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.experimental.MemberVariableMutator</mutator><index>14</index><block>0</block><killingTests>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</killingTests><suspValue>0.05598925109558543</suspValue><description>Removed assignment to member variable useReplacement</description><testsExecutionTime><test><name>org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest.properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown(org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest)</name><time>5ms</time></test></testsExecutionTime><patchExecutionTime>22ms</patchExecutionTime></mutation>
</mutations>
